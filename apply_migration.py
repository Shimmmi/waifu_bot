#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
"""
import os
import sys
from sqlalchemy import create_engine, text

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.getenv('DATABASE_URL', 'postgresql://username:password@localhost/waifu_bot')

def apply_migration():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
    try:
        engine = create_engine(DATABASE_URL)
        
        # –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏
        with open('sql/010_fix_dexterity_and_loyalty.sql', 'r', encoding='utf-8') as f:
            migration_sql = f.read()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        with engine.connect() as conn:
            # –†–∞–∑–¥–µ–ª—è–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            statements = [stmt.strip() for stmt in migration_sql.split(';') if stmt.strip()]
            
            for i, statement in enumerate(statements):
                if statement:
                    print(f"–í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å {i+1}/{len(statements)}...")
                    try:
                        result = conn.execute(text(statement))
                        conn.commit()
                        print(f"‚úÖ –ó–∞–ø—Ä–æ—Å {i+1} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ {i+1}: {e}")
                        conn.rollback()
        
        print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
        with engine.connect() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            result = conn.execute(text("""
                SELECT 
                    rarity,
                    COUNT(*) as count,
                    ROUND(AVG((dynamic->>'bond')::int), 1) as avg_bond,
                    ROUND(AVG((dynamic->>'loyalty')::int), 1) as avg_loyalty
                FROM waifu 
                WHERE dynamic IS NOT NULL
                GROUP BY rarity
                ORDER BY 
                    CASE rarity 
                        WHEN 'Common' THEN 1
                        WHEN 'Uncommon' THEN 2
                        WHEN 'Rare' THEN 3
                        WHEN 'Epic' THEN 4
                        WHEN 'Legendary' THEN 5
                    END
            """))
            
            print("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏:")
            print("–†–µ–¥–∫–æ—Å—Ç—å | –ö–æ–ª-–≤–æ | –°—Ä–µ–¥–Ω. –ª–æ–≤–∫–æ—Å—Ç—å | –°—Ä–µ–¥–Ω. –ª–æ—è–ª—å–Ω–æ—Å—Ç—å")
            print("-" * 50)
            for row in result:
                print(f"{row[0]:<8} | {row[1]:<6} | {row[2]:<14} | {row[3]}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    apply_migration()
