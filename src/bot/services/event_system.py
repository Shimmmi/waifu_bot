import random
from typing import Dict, List, Tuple
from ..data_tables import EVENTS


def calculate_event_score(waifu: Dict, event_type: str) -> Tuple[float, str]:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –æ—á–∫–∏ –≤–∞–π—Ñ—É –≤ —Å–æ–±—ã—Ç–∏–∏"""
    if event_type not in EVENTS:
        return 0.0, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"
    
    event = EVENTS[event_type]
    stats = waifu.get("stats", {})
    dynamic = waifu.get("dynamic", {})
    
    # –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏ –∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    base_score = 0
    for stat in event["base_stats"]:
        if stat in stats:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ–∞–ª–∏–∑–º–∞
            multiplier = random.uniform(0.8, 1.2)
            base_score += stats[stat] * multiplier
    
    # –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
    profession_bonus = 1.0
    if waifu.get("profession") == event["profession_bonus"]:
        profession_bonus = 1.25
    
    # –ë–æ–Ω—É—Å—ã –æ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    mood_bonus = dynamic.get("mood", 50) / 100
    loyalty_bonus = dynamic.get("loyalty", 50) / 100
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç
    final_score = base_score * profession_bonus * (0.8 + mood_bonus * 0.2) * (0.9 + loyalty_bonus * 0.1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–∞
    final_score *= random.uniform(0.9, 1.1)
    
    return round(final_score, 2), event["name"]


def get_event_rewards(score: float, event_type: str) -> Dict:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Å–æ–±—ã—Ç–∏–µ"""
    base_rewards = {
        "dance": {"coins": 20, "xp": 15},
        "hunt": {"coins": 30, "xp": 20},
        "quiz": {"coins": 25, "xp": 18},
        "cooking": {"coins": 22, "xp": 16},
        "singing": {"coins": 28, "xp": 19}
    }
    
    base = base_rewards.get(event_type, {"coins": 20, "xp": 15})
    
    # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—á–∫–æ–≤
    if score >= 100:
        multiplier = 2.0
    elif score >= 80:
        multiplier = 1.5
    elif score >= 60:
        multiplier = 1.2
    else:
        multiplier = 1.0
    
    return {
        "coins": int(base["coins"] * multiplier),
        "xp": int(base["xp"] * multiplier),
        "score": score
    }


def get_random_event() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"""
    return random.choice(list(EVENTS.keys()))


def get_event_description(event_type: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
    if event_type in EVENTS:
        event = EVENTS[event_type]
        return f"üéØ <b>{event['name']}</b>\n{event['description']}"
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"


def format_event_result(waifu: Dict, event_type: str, score: float, rewards: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–±—ã—Ç–∏—è"""
    event_name = EVENTS.get(event_type, {}).get("name", "–°–æ–±—ã—Ç–∏–µ")
    
    result = f"""
üéØ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–±—ã—Ç–∏—è: {event_name}</b>

üë§ <b>{waifu['name']}</b> —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∞ –≤ —Å–æ–±—ã—Ç–∏–∏!
üìä –û—á–∫–∏: {score}
üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç: {get_performance_text(score)}

üí∞ <b>–ù–∞–≥—Ä–∞–¥—ã:</b>
ü™ô –ú–æ–Ω–µ—Ç—ã: +{rewards['coins']}
‚≠ê –û–ø—ã—Ç: +{rewards['xp']}

üí≠ <b>–í–ª–∏—è–Ω–∏–µ –Ω–∞ –≤–∞–π—Ñ—É:</b>
‚ö° –≠–Ω–µ—Ä–≥–∏—è: -20
üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: +5
üíù –õ–æ—è–ª—å–Ω–æ—Å—Ç—å: +2
"""
    
    return result.strip()


def get_performance_text(score: float) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    if score >= 100:
        return "üèÜ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ!"
    elif score >= 80:
        return "ü•á –û—Ç–ª–∏—á–Ω–æ!"
    elif score >= 60:
        return "ü•à –•–æ—Ä–æ—à–æ"
    elif score >= 40:
        return "ü•â –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
    else:
        return "üòî –ù—É–∂–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è"


def get_available_events() -> List[Dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
    events = []
    for event_type, event_data in EVENTS.items():
        events.append({
            "id": event_type,
            "name": event_data["name"],
            "description": event_data["description"],
            "base_stats": event_data["base_stats"],
            "profession_bonus": event_data["profession_bonus"]
        })
    return events


def can_participate_in_event(waifu: Dict, event_type: str) -> Tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –≤–∞–π—Ñ—É —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–æ–±—ã—Ç–∏–∏"""
    if event_type not in EVENTS:
        return False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω–µ—Ä–≥–∏—é
    energy = waifu.get("dynamic", {}).get("energy", 0)
    if energy < 20:
        return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è —É—á–∞—Å—Ç–∏—è"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
    mood = waifu.get("dynamic", {}).get("mood", 0)
    if mood < 30:
        return False, "–°–ª–∏—à–∫–æ–º –ø–ª–æ—Ö–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–ª—è —É—á–∞—Å—Ç–∏—è"
    
    return True, "–ú–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"
