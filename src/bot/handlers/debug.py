"""
Debug menu handlers for Waifu Bot
Admin/debug commands for testing and troubleshooting
"""

from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram import Router
from sqlalchemy import select, update
from datetime import datetime

from bot.db import SessionLocal
from bot.models import User, Waifu
from bot.models.skills import UserSkills, UserSkillLevel

router = Router()


async def handle_debug_menu_callback(callback: CallbackQuery) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –æ—Ç–ª–∞–¥–∫–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ö° –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é –≤—Å–µ–º –≤–∞–π—Ñ—É", callback_data="debug_restore_energy")],
        [InlineKeyboardButton(text="üí∞ +10000 –º–æ–Ω–µ—Ç –∏ +100 –≥–µ–º–æ–≤", callback_data="debug_add_currency")],
        [InlineKeyboardButton(text="‚ú® +1000 XP –¥–ª—è –≤–∞–π—Ñ—É", callback_data="debug_add_xp_menu")],
        [InlineKeyboardButton(text="üß¨ +100 –æ—á–∫–æ–≤ –ø—Ä–æ–∫–∞—á–∫–∏", callback_data="debug_add_skill_points")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–±—Ä–∞—Ç—å –≤—Å–µ –æ—á–∫–∏ –ø—Ä–æ–∫–∞—á–∫–∏", callback_data="debug_wipe_skill_points")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –≤–∞–π—Ñ—É", callback_data="debug_wipe_confirm")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    
    await callback.message.edit_text(
        "üîß <b>Debug Menu</b>\n\n"
        "–ú–µ–Ω—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ª–∞–¥–∫–∏:\n\n"
        "‚ö†Ô∏è –≠—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è –≤–ª–∏—è—é—Ç –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å!",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


async def handle_debug_action_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–µ–±–∞–≥-–º–µ–Ω—é"""
    if callback.from_user is None:
        return
    
    tg_user_id = callback.from_user.id
    
    if callback.data == "debug_restore_energy":
        await handle_debug_restore_energy(callback, tg_user_id)
    elif callback.data == "debug_add_currency":
        await handle_debug_add_currency(callback, tg_user_id)
    elif callback.data == "debug_add_xp_menu":
        await handle_debug_add_xp_menu(callback, tg_user_id)
    elif callback.data == "debug_add_skill_points":
        await handle_debug_add_skill_points(callback, tg_user_id)
    elif callback.data == "debug_wipe_skill_points":
        await handle_debug_wipe_skill_points(callback, tg_user_id)
    elif callback.data == "debug_wipe_confirm":
        await handle_debug_wipe_confirm(callback, tg_user_id)
    elif callback.data == "debug_wipe_execute":
        await handle_debug_wipe_execute(callback, tg_user_id)
    elif callback.data.startswith("debug_add_xp_"):
        await handle_debug_add_xp_to_waifu(callback, tg_user_id)


async def handle_debug_restore_energy(callback: CallbackQuery, tg_user_id: int) -> None:
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –≤—Å–µ–º –≤–∞–π—Ñ—É"""
    session = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = session.execute(select(User).where(User.tg_id == tg_user_id))
        user = result.scalar_one_or_none()
        
        if user is None:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≤–∞–π—Ñ—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        waifus_result = session.execute(
            select(Waifu).where(Waifu.owner_id == user.id)
        )
        waifus = waifus_result.scalars().all()
        
        if not waifus:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –≤–∞–π—Ñ—É")
            return
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é –≤—Å–µ–º
        from sqlalchemy.orm.attributes import flag_modified
        
        count = 0
        for waifu in waifus:
            if waifu.dynamic:
                waifu.dynamic = {
                    **waifu.dynamic,
                    "energy": 100,
                    "last_restore": datetime.now().isoformat()
                }
                flag_modified(waifu, "dynamic")
                count += 1
        
        session.commit()
        
        await callback.answer(f"‚úÖ –≠–Ω–µ—Ä–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {count} –≤–∞–π—Ñ—É!")
        await callback.message.edit_text(
            f"‚ö° <b>–≠–Ω–µ—Ä–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>\n\n"
            f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {count} –≤–∞–π—Ñ—É\n"
            f"–≠–Ω–µ—Ä–≥–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ 100%",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="debug_menu")]
            ]),
            parse_mode="HTML"
        )
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()


async def handle_debug_add_currency(callback: CallbackQuery, tg_user_id: int) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã"""
    session = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = session.execute(select(User).where(User.tg_id == tg_user_id))
        user = result.scalar_one_or_none()
        
        if user is None:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É
        old_coins = user.coins
        old_gems = user.gems
        
        user.coins += 10000
        user.gems += 100
        
        session.commit()
        
        await callback.answer("‚úÖ –í–∞–ª—é—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        await callback.message.edit_text(
            f"üí∞ <b>–í–∞–ª—é—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞</b>\n\n"
            f"üí∞ –ú–æ–Ω–µ—Ç—ã: {old_coins} ‚Üí {user.coins} (+10000)\n"
            f"üíé –ì–µ–º—ã: {old_gems} ‚Üí {user.gems} (+100)",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="debug_menu")]
            ]),
            parse_mode="HTML"
        )
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()


async def handle_debug_add_xp_menu(callback: CallbackQuery, tg_user_id: int) -> None:
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤–∞–π—Ñ—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è XP"""
    session = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = session.execute(select(User).where(User.tg_id == tg_user_id))
        user = result.scalar_one_or_none()
        
        if user is None:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≤–∞–π—Ñ—É
        waifus_result = session.execute(
            select(Waifu).where(Waifu.owner_id == user.id)
        )
        waifus = waifus_result.scalars().all()
        
        if not waifus:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –≤–∞–π—Ñ—É")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–π—Ñ—É
        keyboard_buttons = []
        for waifu in waifus[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"{waifu.name} - –£—Ä.{waifu.level}",
                    callback_data=f"debug_add_xp_{waifu.id}"
                )
            ])
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="debug_menu")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(
            "‚ú® <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–π—Ñ—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è 1000 XP:</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()


async def handle_debug_add_xp_to_waifu(callback: CallbackQuery, tg_user_id: int) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ 1000 XP –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–π—Ñ—É"""
    session = SessionLocal()
    try:
        # –ü–∞—Ä—Å–∏–º ID –≤–∞–π—Ñ—É –∏–∑ callback_data
        waifu_id = callback.data.replace("debug_add_xp_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = session.execute(select(User).where(User.tg_id == tg_user_id))
        user = result.scalar_one_or_none()
        
        if user is None:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞–π—Ñ—É
        waifu_result = session.execute(
            select(Waifu).where(Waifu.id == waifu_id, Waifu.owner_id == user.id)
        )
        waifu = waifu_result.scalar_one_or_none()
        
        if not waifu:
            await callback.answer("‚ùå –í–∞–π—Ñ—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º XP –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º level-up
        from bot.services.level_up import level_up_service
        from sqlalchemy.orm.attributes import flag_modified
        
        old_xp = waifu.xp
        old_level = waifu.level
        
        waifu.xp += 1000
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º level-up
        should_level_up, new_level = level_up_service.check_level_up(waifu.xp, waifu.level)
        level_up_info = None
        
        if should_level_up:
            waifu_data = {
                "level": waifu.level,
                "xp": waifu.xp,
                "stats": dict(waifu.stats)
            }
            level_up_info = level_up_service.apply_level_up(waifu_data, new_level)
            waifu.level = new_level
            waifu.stats = level_up_info["updated_stats"]
            flag_modified(waifu, "stats")
        
        session.commit()
        session.refresh(waifu)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        xp_info = level_up_service.get_xp_progress_info(waifu.xp, waifu.level)
        
        text = (
            f"‚ú® <b>XP –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üë§ {waifu.name}\n"
            f"‚ö° –£—Ä–æ–≤–µ–Ω—å: {old_level} ‚Üí {waifu.level}\n"
            f"üìä XP: {old_xp} ‚Üí {waifu.xp}\n"
            f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {xp_info['xp_in_current_level']}/{xp_info['xp_needed_in_level']}\n"
        )
        
        if level_up_info:
            # Add formatted level-up message
            level_up_message = level_up_service.format_level_up_message(waifu.name, level_up_info)
            text += f"\n{level_up_message}"
        
        await callback.answer("‚úÖ 1000 XP –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="debug_menu")]
            ]),
            parse_mode="HTML"
        )
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()


async def handle_debug_wipe_confirm(callback: CallbackQuery, tg_user_id: int) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –≤–∞–π—Ñ—É"""
    session = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = session.execute(select(User).where(User.tg_id == tg_user_id))
        user = result.scalar_one_or_none()
        
        if user is None:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–π—Ñ—É
        waifus_result = session.execute(
            select(Waifu).where(Waifu.owner_id == user.id)
        )
        waifus = waifus_result.scalars().all()
        count = len(waifus)
        
        if count == 0:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –≤–∞–π—Ñ—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö", callback_data="debug_wipe_execute")],
            [InlineKeyboardButton(text="‚úÖ –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="debug_menu")]
        ])
        
        await callback.message.edit_text(
            f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞–π—Ñ—É</b>\n\n"
            f"‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n"
            f"–£ –≤–∞—Å {count} –≤–∞–π—Ñ—É. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏—Ö –≤—Å–µ—Ö?\n\n"
            f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–π—Ñ—É (—É—Ä–æ–≤–µ–Ω—å, –æ–ø—ã—Ç, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏) –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ –ø–æ—Ç–µ—Ä—è–Ω—ã!",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()


async def handle_debug_wipe_execute(callback: CallbackQuery, tg_user_id: int) -> None:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –≤–∞–π—Ñ—É"""
    session = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = session.execute(select(User).where(User.tg_id == tg_user_id))
        user = result.scalar_one_or_none()
        
        if user is None:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –≤–∞–π—Ñ—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        waifus_result = session.execute(
            select(Waifu).where(Waifu.owner_id == user.id)
        )
        waifus = waifus_result.scalars().all()
        count = len(waifus)
        
        for waifu in waifus:
            session.delete(waifu)
        
        session.commit()
        
        await callback.answer("‚úÖ –í—Å–µ –≤–∞–π—Ñ—É —É–¥–∞–ª–µ–Ω—ã!")
        await callback.message.edit_text(
            f"üóëÔ∏è <b>–í–∞–π—Ñ—É —É–¥–∞–ª–µ–Ω—ã</b>\n\n"
            f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –≤–∞–π—Ñ—É: {count}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="debug_menu")]
            ]),
            parse_mode="HTML"
        )
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()


async def handle_debug_add_skill_points(callback: CallbackQuery, tg_user_id: int) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ 100 –æ—á–∫–æ–≤ –Ω–∞–≤—ã–∫–æ–≤"""
    session = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = session.execute(select(User).where(User.tg_id == tg_user_id))
        user = result.scalar_one_or_none()
        
        if user is None:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å UserSkills
        user_skills_result = session.execute(
            select(UserSkills).where(UserSkills.user_id == user.id)
        )
        user_skills = user_skills_result.scalar_one_or_none()
        
        if not user_skills:
            user_skills = UserSkills(user_id=user.id, skill_points=0, total_earned_points=0)
            session.add(user_skills)
        
        old_points = user_skills.skill_points
        old_total = user_skills.total_earned_points
        
        user_skills.skill_points += 100
        user_skills.total_earned_points += 100
        
        session.commit()
        
        await callback.answer("‚úÖ –û—á–∫–∏ –Ω–∞–≤—ã–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        await callback.message.edit_text(
            f"üß¨ <b>–û—á–∫–∏ –Ω–∞–≤—ã–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã</b>\n\n"
            f"üí∞ –¢–µ–∫—É—â–∏–µ –æ—á–∫–∏: {old_points} ‚Üí {user_skills.skill_points} (+100)\n"
            f"üìä –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: {old_total} ‚Üí {user_skills.total_earned_points}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="debug_menu")]
            ]),
            parse_mode="HTML"
        )
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()


async def handle_debug_wipe_skill_points(callback: CallbackQuery, tg_user_id: int) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—á–∫–æ–≤ –Ω–∞–≤—ã–∫–æ–≤ –∏ —É—Ä–æ–≤–Ω–µ–π"""
    session = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = session.execute(select(User).where(User.tg_id == tg_user_id))
        user = result.scalar_one_or_none()
        
        if user is None:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å UserSkills
        user_skills_result = session.execute(
            select(UserSkills).where(UserSkills.user_id == user.id)
        )
        user_skills = user_skills_result.scalar_one_or_none()
        
        if not user_skills:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ—á–∫–æ–≤ –Ω–∞–≤—ã–∫–æ–≤")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Ä–æ–≤–Ω–∏ –Ω–∞–≤—ã–∫–æ–≤
        skill_levels_result = session.execute(
            select(UserSkillLevel).where(UserSkillLevel.user_id == user.id)
        )
        skill_levels = skill_levels_result.scalars().all()
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —É—Ä–æ–≤–Ω–∏ –Ω–∞–≤—ã–∫–æ–≤
        skills_count = len(skill_levels)
        for skill_level in skill_levels:
            session.delete(skill_level)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—á–∫–∏
        old_points = user_skills.skill_points
        user_skills.skill_points = 0
        user_skills.total_earned_points = 0
        
        session.commit()
        
        await callback.answer("‚úÖ –í—Å–µ –æ—á–∫–∏ –Ω–∞–≤—ã–∫–æ–≤ —É–¥–∞–ª–µ–Ω—ã!")
        await callback.message.edit_text(
            f"üóëÔ∏è <b>–û—á–∫–∏ –Ω–∞–≤—ã–∫–æ–≤ —É–¥–∞–ª–µ–Ω—ã</b>\n\n"
            f"üí∞ –ë—ã–ª–æ –æ—á–∫–æ–≤: {old_points}\n"
            f"üìä –£–¥–∞–ª–µ–Ω–æ –Ω–∞–≤—ã–∫–æ–≤: {skills_count}\n\n"
            f"–í—Å–µ –æ—á–∫–∏ –∏ —É—Ä–æ–≤–Ω–∏ –Ω–∞–≤—ã–∫–æ–≤ —Å–±—Ä–æ—à–µ–Ω—ã!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="debug_menu")]
            ]),
            parse_mode="HTML"
        )
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()
