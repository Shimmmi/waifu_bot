from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select, func
from datetime import datetime

from bot.db import SessionLocal
from bot.models import User, Waifu, Transaction
from bot.services.waifu_generator import generate_waifu, format_waifu_card, calculate_waifu_power

router = Router()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 305174198

@router.message(Command("debug"))
async def cmd_debug(message: Message) -> None:
    """Debug –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º"""
    if message.from_user is None:
        return
    
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è debug –∫–æ–º–∞–Ω–¥.")
        return
    
    session = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = session.execute(select(User).where(User.tg_id == message.from_user.id))
        user = result.scalar_one_or_none()
        
        if user is None:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        waifu_count = session.execute(
            select(func.count(Waifu.id)).where(Waifu.owner_id == user.id)
        ).scalar()
        
        total_waifu = session.execute(select(func.count(Waifu.id))).scalar()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        last_transactions = session.execute(
            select(Transaction).where(Transaction.user_id == user.id)
            .order_by(Transaction.created_at.desc()).limit(5)
        ).scalars().all()
        
        debug_text = f"""
üîç <b>DEBUG INFO</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>
ID: {user.id}
TG ID: {user.tg_id}
–ò–º—è: {user.display_name}
–ú–æ–Ω–µ—Ç—ã: {user.coins}
–ì–µ–º—ã: {user.gems}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
–ú–æ–∏ –≤–∞–π—Ñ—É: {waifu_count}
–í—Å–µ–≥–æ –≤–∞–π—Ñ—É –≤ —Å–∏—Å—Ç–µ–º–µ: {total_waifu}

üí∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>
"""
        
        if last_transactions:
            for tx in last_transactions:
                debug_text += f"‚Ä¢ {tx.kind} {tx.amount} {tx.currency} ({tx.reason})\n"
        else:
            debug_text += "–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞–π—Ñ—É
        try:
            test_waifu = generate_waifu(999999, user.id)
            debug_text += f"\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∞–π—Ñ—É —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
            debug_text += f"–¢–µ—Å—Ç–æ–≤–∞—è –≤–∞–π—Ñ—É: {test_waifu['name']} [{test_waifu['rarity']}]\n"
        except Exception as e:
            debug_text += f"\n‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {str(e)}\n"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–∑—ã–≤", callback_data="admin_test_pull")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –≤–∞–π—Ñ—É", callback_data="admin_list_waifu")],
            [InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤–∞–π—Ñ—É", callback_data="admin_clear_waifu")],
            [InlineKeyboardButton(text="üí∞ –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã", callback_data="admin_add_coins")]
        ])
        
        await message.answer(debug_text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ debug: {str(e)}")
    finally:
        session.close()


@router.callback_query(lambda c: c.data == "admin_test_pull")
async def handle_admin_test_pull(callback: CallbackQuery) -> None:
    """–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–∑—ã–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if callback.from_user is None or callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    session = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = session.execute(select(User).where(User.tg_id == callback.from_user.id))
        user = result.scalar_one_or_none()
        
        if user is None:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≤–∞–π—Ñ—É
        max_card = session.execute(select(func.max(Waifu.card_number))).scalar() or 0
        new_waifu_data = generate_waifu(max_card + 1, user.id)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∞–π—Ñ—É –≤ –±–∞–∑–µ
        waifu = Waifu(**new_waifu_data)
        session.add(waifu)
        session.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        card_text = format_waifu_card(new_waifu_data)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ debug", callback_data="debug_back")]
        ])
        
        await callback.message.edit_text(
            f"üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–∑—ã–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n{card_text}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer("–¢–µ—Å—Ç–æ–≤–∞—è –≤–∞–π—Ñ—É —Å–æ–∑–¥–∞–Ω–∞!")
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()


@router.callback_query(lambda c: c.data == "admin_list_waifu")
async def handle_admin_list_waifu(callback: CallbackQuery) -> None:
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞–π—Ñ—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if callback.from_user is None or callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    session = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∞–π—Ñ—É
        waifus_result = session.execute(
            select(Waifu).order_by(Waifu.created_at.desc()).limit(20)
        )
        waifus = waifus_result.scalars().all()
        
        if not waifus:
            text = "üìã <b>–°–ø–∏—Å–æ–∫ –≤–∞–π—Ñ—É</b>\n\n–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–∞–π—Ñ—É."
        else:
            text = f"üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(waifus)} –≤–∞–π—Ñ—É:</b>\n\n"
            for i, waifu in enumerate(waifus, 1):
                power = calculate_waifu_power({
                    "stats": waifu.stats,
                    "dynamic": waifu.dynamic,
                    "level": waifu.level
                })
                text += f"{i}. {waifu.name} [{waifu.rarity}] - üí™{power}\n"
                text += f"   –í–ª–∞–¥–µ–ª–µ—Ü: {waifu.owner_id} | ID: {waifu.id}\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ debug", callback_data="debug_back")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()


@router.callback_query(lambda c: c.data == "admin_clear_waifu")
async def handle_admin_clear_waifu(callback: CallbackQuery) -> None:
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤–∞–π—Ñ—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if callback.from_user is None or callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    session = SessionLocal()
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–∞–π—Ñ—É
        deleted_count = session.execute(select(func.count(Waifu.id))).scalar()
        session.execute(select(Waifu).delete())
        session.commit()
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ debug", callback_data="debug_back")]
        ])
        
        await callback.message.edit_text(
            f"üóëÔ∏è <b>–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n–£–¥–∞–ª–µ–Ω–æ –≤–∞–π—Ñ—É: {deleted_count}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer("–í–∞–π—Ñ—É –æ—á–∏—â–µ–Ω—ã!")
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()


@router.callback_query(lambda c: c.data == "admin_add_coins")
async def handle_admin_add_coins(callback: CallbackQuery) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if callback.from_user is None or callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    session = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = session.execute(select(User).where(User.tg_id == callback.from_user.id))
        user = result.scalar_one_or_none()
        
        if user is None:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã
        user.coins += 1000
        session.commit()
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ debug", callback_data="debug_back")]
        ])
        
        await callback.message.edit_text(
            f"üí∞ <b>–ú–æ–Ω–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!</b>\n\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.coins} –º–æ–Ω–µ—Ç",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer("–ú–æ–Ω–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()


@router.callback_query(lambda c: c.data == "debug_back")
async def handle_debug_back(callback: CallbackQuery) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ debug –º–µ–Ω—é"""
    if callback.from_user is None or callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ debug –∫–æ–º–∞–Ω–¥–µ
    await callback.message.edit_text("üîç <b>DEBUG MENU</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /debug –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    await callback.answer()
