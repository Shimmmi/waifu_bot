from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from sqlalchemy import select, func
from sqlalchemy.orm import Session
import logging
import traceback

from bot.db import SessionLocal
from bot.models import User, Waifu, Event, EventParticipation
from bot.services.waifu_generator import generate_waifu, format_waifu_card, calculate_waifu_power
from bot.services.event_system import (
    calculate_event_score, get_event_rewards, get_random_event, 
    get_event_description, format_event_result, get_available_events,
    can_participate_in_event
)

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("waifu"))
async def cmd_waifu(message: Message) -> None:
    """–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤–∞–π—Ñ—É"""
    if message.from_user is None:
        return
    
    # Get user to check coins
    session = SessionLocal()
    try:
        result = session.execute(select(User).where(User.tg_id == message.from_user.id))
        user = result.scalar_one_or_none()
        
        keyboard_rows = [
            [InlineKeyboardButton(text="üé∞ –ü—Ä–∏–∑–≤–∞—Ç—å 1 –≤–∞–π—Ñ—É (100)", callback_data="waifu_pull_single")],
        ]
        
        # Add 10-pull button if user has enough coins
        if user and user.coins >= 1000:
            keyboard_rows.append([InlineKeyboardButton(text="üé∞ –ü—Ä–∏–∑–≤–∞—Ç—å 10 –≤–∞–π—Ñ—É (1000)", callback_data="waifu_pull_multi")])
        
        keyboard_rows.extend([
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –≤–∞–π—Ñ—É", callback_data="waifu_list")],
            [InlineKeyboardButton(text="üéØ –°–æ–±—ã—Ç–∏—è", callback_data="waifu_events")],
            [InlineKeyboardButton(text="üèÜ –¢—É—Ä–Ω–∏—Ä—ã", callback_data="waifu_tournaments")]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    finally:
        session.close()

    await message.answer(
        "üé≠ <b>–í–∞–π—Ñ—É —Å–∏—Å—Ç–µ–º–∞</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –≤–∞–π—Ñ—É! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ü—Ä–∏–∑—ã–≤–∞—Ç—å –Ω–æ–≤—ã—Ö –≤–∞–π—Ñ—É\n"
        "‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–æ–±—ã—Ç–∏—è—Ö\n"
        "‚Ä¢ –°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö\n"
        "‚Ä¢ –†–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–∏—Ö –≤–∞–π—Ñ—É\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.callback_query(lambda c: c.data == "waifu_pull_single")
async def handle_waifu_pull_single(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∑—ã–≤–∞ –≤–∞–π—Ñ—É"""
    if callback.from_user is None:
        logger.warning("Waifu pull callback with no user")
        return

    tg_user_id = callback.from_user.id
    logger.info(f"üé∞ Waifu pull requested by user {tg_user_id}")
    
    session = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.debug(f"Checking user {tg_user_id} in database")
        result = session.execute(select(User).where(User.tg_id == tg_user_id))
        user = result.scalar_one_or_none()

        if user is None:
            logger.warning(f"User {tg_user_id} not found in database")
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return

        logger.info(f"User found: {user.username}, coins: {user.coins}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if user.coins < 100:
            logger.info(f"Insufficient coins for user {user.username}: {user.coins}")
            await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ 100 –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–∏–∑—ã–≤–∞.")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –≤–∞–π—Ñ—É
        logger.debug("Getting max card number")
        max_card = session.execute(select(func.max(Waifu.card_number))).scalar() or 0
        logger.info(f"Max card number: {max_card}, generating new waifu #{max_card + 1}")
        
        try:
            new_waifu_data = generate_waifu(max_card + 1, user.id)
            logger.info(f"‚úÖ Generated waifu: {new_waifu_data['name']} ({new_waifu_data['race']}, {new_waifu_data['rarity']})")
            logger.debug(f"Waifu data: {new_waifu_data}")
        except Exception as gen_error:
            logger.error(f"‚ùå Error generating waifu: {gen_error}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise
        
        # –°–æ–∑–¥–∞–µ–º –≤–∞–π—Ñ—É –≤ –±–∞–∑–µ
        try:
            logger.debug("Creating Waifu model instance")
            waifu = Waifu(**new_waifu_data)
            session.add(waifu)
            logger.debug("Waifu added to session")
        except Exception as db_error:
            logger.error(f"‚ùå Error creating Waifu in database: {db_error}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã
        user.coins -= 100
        logger.debug(f"Deducted 100 coins, remaining: {user.coins}")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        try:
            from bot.models import Transaction
            transaction = Transaction(
                user_id=user.id,
                kind="spend",
                amount=100,
                currency="coins",
                reason="waifu_pull",
                meta={"waifu_id": waifu.id}
            )
            session.add(transaction)
            logger.debug("Transaction added to session")
        except Exception as trans_error:
            logger.error(f"‚ùå Error creating transaction: {trans_error}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise
        
        # Commit to database
        try:
            logger.debug("Committing to database...")
            session.commit()
            logger.info("‚úÖ Database commit successful")
        except Exception as commit_error:
            logger.error(f"‚ùå Error committing to database: {commit_error}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        try:
            logger.debug("Formatting waifu card")
            card_text = format_waifu_card(new_waifu_data)
            logger.debug("Sending response to user")
            await callback.message.edit_text(
                f"üé∞ <b>–ü—Ä–∏–∑—ã–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n{card_text}\n\n"
                f"üí∞ –û—Å—Ç–∞–ª–æ—Å—å –º–æ–Ω–µ—Ç: {user.coins}",
                parse_mode="HTML"
            )
            await callback.answer("–í–∞–π—Ñ—É —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∑–≤–∞–Ω–∞!")
            logger.info(f"‚úÖ Successfully summoned waifu {new_waifu_data['name']} for user {user.username}")
        except Exception as msg_error:
            logger.error(f"‚ùå Error sending message: {msg_error}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise

    except Exception as e:
        logger.error(f"‚ùå WAIFU PULL ERROR for user {tg_user_id}: {type(e).__name__}: {str(e)}")
        logger.error(f"Full traceback:\n{traceback.format_exc()}")
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∑—ã–≤–µ: {str(e)}")
        session.rollback()
    finally:
        session.close()
        logger.debug("Session closed")


@router.callback_query(lambda c: c.data == "waifu_pull_multi")
async def handle_waifu_pull_multi(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–∏–∑—ã–≤–∞ 10 –≤–∞–π—Ñ—É"""
    if callback.from_user is None:
        logger.warning("Waifu multi-pull callback with no user")
        return

    tg_user_id = callback.from_user.id
    logger.info(f"üé∞ Multi-waifu pull (10x) requested by user {tg_user_id}")
    
    session = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = session.execute(select(User).where(User.tg_id == tg_user_id))
        user = result.scalar_one_or_none()

        if user is None:
            logger.warning(f"User {tg_user_id} not found in database")
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return

        logger.info(f"User found: {user.username}, coins: {user.coins}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if user.coins < 1000:
            logger.info(f"Insufficient coins for user {user.username}: {user.coins}")
            await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ 1000 –º–æ–Ω–µ—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–∏–∑—ã–≤–∞.")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 10 –≤–∞–π—Ñ—É
        max_card = session.execute(select(func.max(Waifu.card_number))).scalar() or 0
        logger.info(f"Max card number: {max_card}, generating 10 waifus")
        
        waifus_created = []
        try:
            for i in range(10):
                new_waifu_data = generate_waifu(max_card + 1 + i, user.id)
                waifu = Waifu(**new_waifu_data)
                session.add(waifu)
                waifus_created.append(new_waifu_data)
                logger.debug(f"Generated waifu #{i+1}: {new_waifu_data['name']} ({new_waifu_data['rarity']})")
            
            logger.info(f"‚úÖ Generated 10 waifus")
        except Exception as gen_error:
            logger.error(f"‚ùå Error generating waifus: {gen_error}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã
        user.coins -= 1000
        logger.debug(f"Deducted 1000 coins, remaining: {user.coins}")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        from bot.models import Transaction
        transaction = Transaction(
            user_id=user.id,
            kind="spend",
            amount=1000,
            currency="coins",
            reason="waifu_pull_multi",
            meta={"count": 10}
        )
        session.add(transaction)
        
        # Commit to database
        try:
            session.commit()
            logger.info("‚úÖ Database commit successful")
        except Exception as commit_error:
            logger.error(f"‚ùå Error committing to database: {commit_error}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        text = "üé∞ <b>–ú–∞—Å—Å–æ–≤—ã–π –ø—Ä–∏–∑—ã–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
        text += f"üéÅ –ü—Ä–∏–∑–≤–∞–Ω–æ –≤–∞–π—Ñ—É: {len(waifus_created)}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –≤–∞–π—Ñ—É
        for i, waifu_data in enumerate(waifus_created, 1):
            text += f"{i}. {waifu_data['name']} [{waifu_data['rarity']}] - {waifu_data['race']}\n"
        
        text += f"\nüí∞ –û—Å—Ç–∞–ª–æ—Å—å –º–æ–Ω–µ—Ç: {user.coins}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await callback.message.edit_text(text, parse_mode="HTML")
        await callback.answer(f"–ü—Ä–∏–∑–≤–∞–Ω–æ {len(waifus_created)} –≤–∞–π—Ñ—É!")
        logger.info(f"‚úÖ Successfully summoned 10 waifus for user {user.username}")

    except Exception as e:
        logger.error(f"‚ùå MULTI WAIFU PULL ERROR for user {tg_user_id}: {type(e).__name__}: {str(e)}")
        logger.error(f"Full traceback:\n{traceback.format_exc()}")
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –ø—Ä–∏–∑—ã–≤–µ: {str(e)}")
        session.rollback()
    finally:
        session.close()


@router.callback_query(lambda c: c.data == "waifu_list")
async def handle_waifu_list(callback: CallbackQuery) -> None:
    """–°–ø–∏—Å–æ–∫ –≤–∞–π—Ñ—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if callback.from_user is None:
        return

    tg_user_id = callback.from_user.id
    session = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = session.execute(select(User).where(User.tg_id == tg_user_id))
        user = result.scalar_one_or_none()

        if user is None:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤–∞–π—Ñ—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        waifus_result = session.execute(
            select(Waifu).where(Waifu.owner_id == user.id).order_by(Waifu.created_at.desc())
        )
        waifus = waifus_result.scalars().all()

        if not waifus:
            await callback.message.edit_text(
                "üìã <b>–ú–æ–∏ –≤–∞–π—Ñ—É</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–∞–π—Ñ—É.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–∑—ã–≤, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é –ø–µ—Ä–≤—É—é –≤–∞–π—Ñ—É!",
                parse_mode="HTML"
            )
            await callback.answer()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
        text = f"üìã <b>–ú–æ–∏ –≤–∞–π—Ñ—É ({len(waifus)})</b>)\n\n"
        
        for i, waifu in enumerate(waifus[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            power = calculate_waifu_power({
                "stats": waifu.stats,
                "dynamic": waifu.dynamic,
                "level": waifu.level
            })
            text += f"{i}. {waifu.name} [{waifu.rarity}] - üí™{power}\n"

        if len(waifus) > 5:
            text += f"\n... –∏ –µ—â–µ {len(waifus) - 5} –≤–∞–π—Ñ—É"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_waifu_menu")]
        ])

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()

    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()


@router.callback_query(lambda c: c.data == "waifu_events")
async def handle_waifu_events(callback: CallbackQuery) -> None:
    """–°–æ–±—ã—Ç–∏—è –≤–∞–π—Ñ—É"""
    if callback.from_user is None:
        return

    events = get_available_events()
    
    text = "üéØ <b>–°–æ–±—ã—Ç–∏—è –≤–∞–π—Ñ—É</b>\n\n"
    text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:\n\n"
    
    for event in events:
        text += f"üé™ <b>{event['name']}</b>\n"
        text += f"üìù {event['description']}\n"
        text += f"üìä –ù—É–∂–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {', '.join(event['base_stats'])}\n"
        text += f"üíº –ë–æ–Ω—É—Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: {event['profession_bonus']}\n\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ", callback_data="random_event")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_waifu_menu")]
    ])

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(lambda c: c.data == "random_event")
async def handle_random_event(callback: CallbackQuery) -> None:
    """–£—á–∞—Å—Ç–∏–µ –≤ —Å–ª—É—á–∞–π–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏"""
    if callback.from_user is None:
        return

    tg_user_id = callback.from_user.id
    session = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = session.execute(select(User).where(User.tg_id == tg_user_id))
        user = result.scalar_one_or_none()

        if user is None:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –≤–∞–π—Ñ—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        waifu_result = session.execute(
            select(Waifu).where(Waifu.owner_id == user.id).limit(1)
        )
        waifu = waifu_result.scalar_one_or_none()

        if not waifu:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –≤–∞–π—Ñ—É –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Å–æ–±—ã—Ç–∏—è—Ö!")
            return

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        event_type = get_random_event()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è
        can_participate, reason = can_participate_in_event({
            "dynamic": waifu.dynamic,
            "profession": waifu.profession
        }, event_type)
        
        if not can_participate:
            await callback.answer(f"–ù–µ–ª—å–∑—è —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å: {reason}")
            return

        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        score, event_name = calculate_event_score({
            "stats": waifu.stats,
            "profession": waifu.profession,
            "dynamic": waifu.dynamic
        }, event_type)
        
        rewards = get_event_rewards(score, event_type)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–π—Ñ—É
        waifu.xp += rewards["xp"]
        waifu.dynamic["energy"] = max(0, waifu.dynamic["energy"] - 20)
        waifu.dynamic["mood"] = min(100, waifu.dynamic["mood"] + 5)
        waifu.dynamic["loyalty"] = min(100, waifu.dynamic["loyalty"] + 2)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.coins += rewards["coins"]
        
        session.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = format_event_result({
            "name": waifu.name,
            "stats": waifu.stats,
            "dynamic": waifu.dynamic
        }, event_type, score, rewards)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–æ–±—ã—Ç–∏—è–º", callback_data="waifu_events")]
        ])

        await callback.message.edit_text(result_text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()

    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()


@router.callback_query(lambda c: c.data == "back_to_waifu_menu")
async def handle_back_to_waifu_menu(callback: CallbackQuery) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –≤–∞–π—Ñ—É"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé∞ –ü—Ä–∏–∑–≤–∞—Ç—å –≤–∞–π—Ñ—É", callback_data="waifu_pull")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –≤–∞–π—Ñ—É", callback_data="waifu_list")],
        [InlineKeyboardButton(text="üéØ –°–æ–±—ã—Ç–∏—è", callback_data="waifu_events")],
        [InlineKeyboardButton(text="üèÜ –¢—É—Ä–Ω–∏—Ä—ã", callback_data="waifu_tournaments")]
    ])

    await callback.message.edit_text(
        "üé≠ <b>–í–∞–π—Ñ—É —Å–∏—Å—Ç–µ–º–∞</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –≤–∞–π—Ñ—É! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ü—Ä–∏–∑—ã–≤–∞—Ç—å –Ω–æ–≤—ã—Ö –≤–∞–π—Ñ—É\n"
        "‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–æ–±—ã—Ç–∏—è—Ö\n"
        "‚Ä¢ –°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö\n"
        "‚Ä¢ –†–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–∏—Ö –≤–∞–π—Ñ—É\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()
