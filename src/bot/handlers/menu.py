from aiogram import Router
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from sqlalchemy import select, func
from datetime import datetime, timedelta

from bot.db import SessionLocal
from bot.models import User, Waifu, Transaction
from bot.services.waifu_generator import generate_waifu, format_waifu_card, calculate_waifu_power, get_rarity_color
from bot.services.event_system import (
    calculate_event_score, get_event_rewards, get_random_event, 
    get_event_description, format_event_result, get_available_events,
    can_participate_in_event
)

router = Router()


def get_sort_display_name(sort_by: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
    sort_names = {
        "created_at": "–ü–æ –¥–∞—Ç–µ",
        "name": "–ü–æ –∏–º–µ–Ω–∏", 
        "level": "–ü–æ —É—Ä–æ–≤–Ω—é",
        "rarity": "–ü–æ —Ä–µ–¥–∫–æ—Å—Ç–∏"
    }
    return sort_names.get(sort_by, "–ü–æ –¥–∞—Ç–µ")


@router.callback_query()
async def handle_menu_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
    if callback.data == "profile":
        await handle_profile_callback(callback)
    elif callback.data == "daily":
        await handle_daily_callback(callback)
    elif callback.data == "waifu_menu":
        await handle_waifu_menu_callback(callback)
    elif callback.data == "waifu_pull":
        await handle_waifu_pull_callback(callback)
    elif callback.data == "waifu_list":
        await handle_waifu_list_callback(callback)
    elif callback.data == "waifu_events":
        await handle_waifu_events_callback(callback)
    elif callback.data == "random_event":
        await handle_random_event_callback(callback)
    elif callback.data == "back_to_waifu_menu":
        await handle_waifu_menu_callback(callback)
    elif callback.data.startswith("waifu_list_page_"):
        await handle_waifu_list_page_callback(callback)
    elif callback.data.startswith("waifu_list_sort_"):
        await handle_waifu_list_sort_callback(callback)
    elif callback.data.startswith("waifu_list_sort_menu_"):
        await handle_waifu_list_sort_menu_callback(callback)
    elif callback.data.startswith("event_waifu_select_"):
        await handle_event_waifu_select_callback(callback)
    elif callback.data.startswith("waifu_details_menu_"):
        await handle_waifu_details_menu_callback(callback)
    elif callback.data == "admin_test_pull":
        await handle_admin_test_pull_callback(callback)
    elif callback.data == "admin_list_waifu":
        await handle_admin_list_waifu_callback(callback)
    elif callback.data == "admin_clear_waifu":
        await handle_admin_clear_waifu_callback(callback)
    elif callback.data == "admin_add_coins":
        await handle_admin_add_coins_callback(callback)
    elif callback.data == "debug_back":
        await handle_debug_back_callback(callback)
    elif callback.data == "stats":
        await handle_stats_callback(callback)
    elif callback.data == "back_to_menu":
        await handle_back_to_menu(callback)


async def handle_profile_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ—Ñ–∏–ª—å"""
    if callback.from_user is None:
        return

    tg_user_id = callback.from_user.id
    session = SessionLocal()
    try:
        result = session.execute(select(User).where(User.tg_id == tg_user_id))
        user = result.scalar_one_or_none()

        if user is None:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return

        text = (
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üí∞ –ú–æ–Ω–µ—Ç—ã: {user.coins}\n"
            f"üíé –ì–µ–º—ã: {user.gems}\n"
            f"üë§ –ù–∏–∫: @{user.username if user.username else '‚Äî'}\n"
            f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y')}\n"
            f"üî• –°–µ—Ä–∏—è –¥–Ω–µ–π: {user.daily_streak}"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
    finally:
        session.close()


async def handle_daily_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å"""
    if callback.from_user is None:
        return

    tg_user_id = callback.from_user.id
    session = SessionLocal()
    try:
        result = session.execute(select(User).where(User.tg_id == tg_user_id))
        user = result.scalar_one_or_none()

        if user is None:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return

        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
        from datetime import datetime, timedelta
        now = datetime.utcnow()
        last_daily = user.last_daily.replace(tzinfo=None) if user.last_daily else datetime(1970, 1, 1)
        
        if now - last_daily < timedelta(hours=24):
            time_left = timedelta(hours=24) - (now - last_daily)
            hours = int(time_left.total_seconds() // 3600)
            minutes = int((time_left.total_seconds() % 3600) // 60)
            
            text = (
                f"üéÅ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å</b>\n\n"
                f"‚è∞ –ë–æ–Ω—É—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
                f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {hours}—á {minutes}–º\n\n"
                f"üí° –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –±–æ–Ω—É—Å–æ–º!"
            )
        else:
            # –í—ã–¥–∞–µ–º –±–æ–Ω—É—Å
            user.coins += 50
            user.daily_streak += 1
            user.last_daily = now
            session.commit()

            text = (
                f"üéÅ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω!</b>\n\n"
                f"üí∞ +50 –º–æ–Ω–µ—Ç\n"
                f"üî• –°–µ—Ä–∏—è –¥–Ω–µ–π: {user.daily_streak}\n"
                f"üíµ –ë–∞–ª–∞–Ω—Å: {user.coins} –º–æ–Ω–µ—Ç"
            )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
    finally:
        session.close()


async def handle_gacha_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ì–∞—á–∞"""
    text = (
        "üé∞ <b>–ì–∞—á–∞ —Å–∏—Å—Ç–µ–º–∞</b>\n\n"
        "üí∞ <b>–û–±—ã—á–Ω—ã–π –ø—Ä–∏–∑—ã–≤:</b> 100 –º–æ–Ω–µ—Ç\n"
        "üíé <b>–ü—Ä–µ–º–∏—É–º –ø—Ä–∏–∑—ã–≤:</b> 10 –≥–µ–º–æ–≤\n"
        "üéÅ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–∏–∑—ã–≤:</b> –ë–µ—Å–ø–ª–∞—Ç–Ω–æ\n\n"
        "üìä <b>–®–∞–Ω—Å—ã:</b>\n"
        "‚Ä¢ –û–±—ã—á–Ω—ã–π: 60%\n"
        "‚Ä¢ –†–µ–¥–∫–∏–π: 25%\n"
        "‚Ä¢ –≠–ø–∏—á–µ—Å–∫–∏–π: 12%\n"
        "‚Ä¢ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π: 3%"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –û–±—ã—á–Ω—ã–π –ø—Ä–∏–∑—ã–≤ (100 –º–æ–Ω–µ—Ç)", callback_data="gacha_normal")],
        [InlineKeyboardButton(text="üíé –ü—Ä–µ–º–∏—É–º –ø—Ä–∏–∑—ã–≤ (10 –≥–µ–º–æ–≤)", callback_data="gacha_premium")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


async def handle_stats_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        "üéØ <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        "‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 1\n"
        "‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: 1\n"
        "‚Ä¢ –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ: 100\n\n"
        "üèÜ <b>–¢–æ–ø –∏–≥—Ä–æ–∫–∏:</b>\n"
        "1. @Shimmmmmi - 100 –º–æ–Ω–µ—Ç"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


async def handle_waifu_menu_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –í–∞–π—Ñ—É"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé∞ –ü—Ä–∏–∑–≤–∞—Ç—å –≤–∞–π—Ñ—É", callback_data="waifu_pull")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –≤–∞–π—Ñ—É", callback_data="waifu_list")],
        [InlineKeyboardButton(text="üéØ –°–æ–±—ã—Ç–∏—è", callback_data="waifu_events")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

    await callback.message.edit_text(
        "üé≠ <b>–í–∞–π—Ñ—É —Å–∏—Å—Ç–µ–º–∞</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –≤–∞–π—Ñ—É! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ü—Ä–∏–∑—ã–≤–∞—Ç—å –Ω–æ–≤—ã—Ö –≤–∞–π—Ñ—É\n"
        "‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–æ–±—ã—Ç–∏—è—Ö\n"
        "‚Ä¢ –°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö\n"
        "‚Ä¢ –†–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–∏—Ö –≤–∞–π—Ñ—É\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


async def handle_back_to_menu(callback: CallbackQuery) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton(text="üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", callback_data="daily")],
        [InlineKeyboardButton(text="üé≠ –í–∞–π—Ñ—É", callback_data="waifu_menu")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
    ])

    await callback.message.edit_text(
        "ü§ñ <b>Waifu Bot</b>\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


async def handle_waifu_pull_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∑—ã–≤–∞ –≤–∞–π—Ñ—É"""
    if callback.from_user is None:
        return

    tg_user_id = callback.from_user.id
    session = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = session.execute(select(User).where(User.tg_id == tg_user_id))
        user = result.scalar_one_or_none()

        if user is None:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if user.coins < 100:
            await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ 100 –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–∏–∑—ã–≤–∞.")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –≤–∞–π—Ñ—É
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
        max_card = session.execute(select(func.max(Waifu.card_number))).scalar() or 0
        new_waifu_data = generate_waifu(max_card + 1, user.id)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∞–π—Ñ—É –≤ –±–∞–∑–µ
        waifu = Waifu(**new_waifu_data)
        session.add(waifu)
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã
        user.coins -= 100
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = Transaction(
            user_id=user.id,
            kind="spend",
            amount=100,
            currency="coins",
            reason="waifu_pull",
            meta={"waifu_id": waifu.id}
        )
        session.add(transaction)
        
        session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        card_text = format_waifu_card(new_waifu_data)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤–∞–π—Ñ—É", callback_data="back_to_waifu_menu")]
        ])
        
        await callback.message.edit_text(
            f"üé∞ <b>–ü—Ä–∏–∑—ã–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n{card_text}\n\n"
            f"üí∞ –û—Å—Ç–∞–ª–æ—Å—å –º–æ–Ω–µ—Ç: {user.coins}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer("–í–∞–π—Ñ—É —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∑–≤–∞–Ω–∞!")

    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∑—ã–≤–µ: {str(e)}")
    finally:
        session.close()


async def handle_waifu_list_callback(callback: CallbackQuery) -> None:
    """–°–ø–∏—Å–æ–∫ –≤–∞–π—Ñ—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if callback.from_user is None:
        return

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
    await show_waifu_list_page(callback, page=0, sort_by="created_at")


async def show_waifu_list_page(callback: CallbackQuery, page: int = 0, sort_by: str = "created_at") -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –≤–∞–π—Ñ—É"""
    if callback.from_user is None:
        return

    tg_user_id = callback.from_user.id
    session = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = session.execute(select(User).where(User.tg_id == tg_user_id))
        user = result.scalar_one_or_none()

        if user is None:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        order_clause = {
            "created_at": Waifu.created_at.desc(),
            "name": Waifu.name.asc(),
            "level": Waifu.level.desc(),
            "rarity": Waifu.rarity.desc()
        }.get(sort_by, Waifu.created_at.desc())

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∞–π—Ñ—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        waifus_result = session.execute(
            select(Waifu).where(Waifu.owner_id == user.id).order_by(order_clause)
        )
        waifus = waifus_result.scalars().all()

        if not waifus:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤–∞–π—Ñ—É", callback_data="back_to_waifu_menu")]
            ])
            await callback.message.edit_text(
                "üìã <b>–ú–æ–∏ –≤–∞–π—Ñ—É</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–∞–π—Ñ—É.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–∑—ã–≤, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é –ø–µ—Ä–≤—É—é –≤–∞–π—Ñ—É!",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await callback.answer()
            return

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        WAIFUS_PER_PAGE = 5
        start_idx = page * WAIFUS_PER_PAGE
        end_idx = start_idx + WAIFUS_PER_PAGE
        current_waifus = waifus[start_idx:end_idx]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
        text = f"üìã <b>–ú–æ–∏ –≤–∞–π—Ñ—É ({len(waifus)})</b>\n"
        text += f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{(len(waifus) + WAIFUS_PER_PAGE - 1) // WAIFUS_PER_PAGE}\n"
        text += f"üîÄ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {get_sort_display_name(sort_by)}\n\n"
        
        for i, waifu in enumerate(current_waifus, start_idx + 1):
            power = calculate_waifu_power({
                "stats": waifu.stats,
                "dynamic": waifu.dynamic,
                "level": waifu.level
            })
            
            rarity_icon = get_rarity_color(waifu.rarity)
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–π—Ñ—É –±–µ–∑ —Å—Å—ã–ª–∫–∏
            text += f"{i}. {waifu.name} - –£—Ä.{waifu.level} {rarity_icon} üí™{power}\n"

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard_buttons = []
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"waifu_list_page_{page-1}_{sort_by}"))
        if end_idx < len(waifus):
            nav_buttons.append(InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"waifu_list_page_{page+1}_{sort_by}"))
        
        if nav_buttons:
            keyboard_buttons.append(nav_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        keyboard_buttons.append([InlineKeyboardButton(text="‚ÑπÔ∏è –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data=f"waifu_details_menu_{page}_{sort_by}")])
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        keyboard_buttons.append([InlineKeyboardButton(text="üîÄ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", callback_data=f"waifu_list_sort_menu_{page}_{sort_by}")])
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤–∞–π—Ñ—É", callback_data="back_to_waifu_menu")])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        try:
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        except Exception as edit_error:
            if "message is not modified" in str(edit_error):
                # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
                await callback.answer()
                return
            else:
                raise edit_error
        await callback.answer()

    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()


async def handle_waifu_events_callback(callback: CallbackQuery) -> None:
    """–°–æ–±—ã—Ç–∏—è –≤–∞–π—Ñ—É"""
    if callback.from_user is None:
        return

    events = get_available_events()
    
    text = "üéØ <b>–°–æ–±—ã—Ç–∏—è –≤–∞–π—Ñ—É</b>\n\n"
    text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:\n\n"
    
    for event in events:
        text += f"üé™ <b>{event['name']}</b>\n"
        text += f"üìù {event['description']}\n"
        text += f"üìä –ù—É–∂–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {', '.join(event['base_stats'])}\n"
        text += f"üíº –ë–æ–Ω—É—Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: {event['profession_bonus']}\n\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ", callback_data="random_event")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤–∞–π—Ñ—É", callback_data="back_to_waifu_menu")]
    ])

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


async def handle_random_event_callback(callback: CallbackQuery) -> None:
    """–£—á–∞—Å—Ç–∏–µ –≤ —Å–ª—É—á–∞–π–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏ - –≤—ã–±–æ—Ä –≤–∞–π—Ñ—É"""
    if callback.from_user is None:
        return

    tg_user_id = callback.from_user.id
    session = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = session.execute(select(User).where(User.tg_id == tg_user_id))
        user = result.scalar_one_or_none()

        if user is None:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∞–π—Ñ—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        waifus_result = session.execute(
            select(Waifu).where(Waifu.owner_id == user.id)
        )
        waifus = waifus_result.scalars().all()

        if not waifus:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –≤–∞–π—Ñ—É –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Å–æ–±—ã—Ç–∏—è—Ö!")
            return

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        event_type = get_random_event()
        event_info = get_event_description(event_type)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–π—Ñ—É
        keyboard_buttons = []
        for waifu in waifus:
            power = calculate_waifu_power({
                "stats": waifu.stats,
                "dynamic": waifu.dynamic,
                "level": waifu.level
            })
            rarity_icon = get_rarity_color(waifu.rarity)
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"{waifu.name} - –£—Ä.{waifu.level} {rarity_icon} üí™{power}",
                    callback_data=f"event_waifu_select_{waifu.id}_{event_type}"
                )
            ])
        
        keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–æ–±—ã—Ç–∏—è–º", callback_data="waifu_events")])

        text = (
            f"üé≤ <b>–°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event_info['name']}</b>\n\n"
            f"üìù {event_info['description']}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–π—Ñ—É –¥–ª—è —É—á–∞—Å—Ç–∏—è:"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()

    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()


# Debug –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 305174198

async def handle_admin_test_pull_callback(callback: CallbackQuery) -> None:
    """–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–∑—ã–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if callback.from_user is None or callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    session = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = session.execute(select(User).where(User.tg_id == callback.from_user.id))
        user = result.scalar_one_or_none()
        
        if user is None:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≤–∞–π—Ñ—É
        max_card = session.execute(select(func.max(Waifu.card_number))).scalar() or 0
        new_waifu_data = generate_waifu(max_card + 1, user.id)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∞–π—Ñ—É –≤ –±–∞–∑–µ
        waifu = Waifu(**new_waifu_data)
        session.add(waifu)
        session.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        card_text = format_waifu_card(new_waifu_data)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ debug", callback_data="debug_back")]
        ])
        
        await callback.message.edit_text(
            f"üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–∑—ã–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n{card_text}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer("–¢–µ—Å—Ç–æ–≤–∞—è –≤–∞–π—Ñ—É —Å–æ–∑–¥–∞–Ω–∞!")
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()


async def handle_admin_list_waifu_callback(callback: CallbackQuery) -> None:
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞–π—Ñ—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if callback.from_user is None or callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    session = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∞–π—Ñ—É
        waifus_result = session.execute(
            select(Waifu).order_by(Waifu.created_at.desc()).limit(20)
        )
        waifus = waifus_result.scalars().all()
        
        if not waifus:
            text = "üìã <b>–°–ø–∏—Å–æ–∫ –≤–∞–π—Ñ—É</b>\n\n–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–∞–π—Ñ—É."
        else:
            text = f"üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(waifus)} –≤–∞–π—Ñ—É:</b>\n\n"
            for i, waifu in enumerate(waifus, 1):
                power = calculate_waifu_power({
                    "stats": waifu.stats,
                    "dynamic": waifu.dynamic,
                    "level": waifu.level
                })
                text += f"{i}. {waifu.name} [{waifu.rarity}] - üí™{power}\n"
                text += f"   –í–ª–∞–¥–µ–ª–µ—Ü: {waifu.owner_id} | ID: {waifu.id}\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ debug", callback_data="debug_back")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()


async def handle_admin_clear_waifu_callback(callback: CallbackQuery) -> None:
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤–∞–π—Ñ—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if callback.from_user is None or callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    session = SessionLocal()
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–∞–π—Ñ—É
        deleted_count = session.execute(select(func.count(Waifu.id))).scalar()
        session.execute(select(Waifu).delete())
        session.commit()
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ debug", callback_data="debug_back")]
        ])
        
        await callback.message.edit_text(
            f"üóëÔ∏è <b>–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n–£–¥–∞–ª–µ–Ω–æ –≤–∞–π—Ñ—É: {deleted_count}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer("–í–∞–π—Ñ—É –æ—á–∏—â–µ–Ω—ã!")
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()


async def handle_admin_add_coins_callback(callback: CallbackQuery) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if callback.from_user is None or callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    session = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = session.execute(select(User).where(User.tg_id == callback.from_user.id))
        user = result.scalar_one_or_none()
        
        if user is None:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã
        user.coins += 1000
        session.commit()
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ debug", callback_data="debug_back")]
        ])
        
        await callback.message.edit_text(
            f"üí∞ <b>–ú–æ–Ω–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!</b>\n\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.coins} –º–æ–Ω–µ—Ç",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer("–ú–æ–Ω–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()


async def handle_debug_back_callback(callback: CallbackQuery) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ debug –º–µ–Ω—é"""
    if callback.from_user is None or callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ debug –∫–æ–º–∞–Ω–¥–µ
    await callback.message.edit_text("üîç <b>DEBUG MENU</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /debug –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    await callback.answer()


async def handle_waifu_list_page_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∞–π—Ñ—É"""
    if callback.from_user is None:
        return
    
    # –ü–∞—Ä—Å–∏–º callback data: waifu_list_page_{page}_{sort_by}
    parts = callback.data.split("_")
    if len(parts) >= 5:
        page = int(parts[3])
        sort_by = parts[4]
        await show_waifu_list_page(callback, page=page, sort_by=sort_by)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")


async def handle_waifu_list_sort_menu_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –≤–∞–π—Ñ—É"""
    if callback.from_user is None:
        return
    
    # –ü–∞—Ä—Å–∏–º callback data: waifu_list_sort_menu_{page}_{sort_by}
    parts = callback.data.split("_")
    if len(parts) >= 5:
        page = int(parts[4])  # parts[4] = page
        # sort_by –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "created_at")
        sort_by = "_".join(parts[5:]) if len(parts) > 5 else "created_at"
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –ü–æ –¥–∞—Ç–µ", callback_data=f"waifu_list_sort_createdat_{page}")],
            [InlineKeyboardButton(text="üìù –ü–æ –∏–º–µ–Ω–∏", callback_data=f"waifu_list_sort_name_{page}")],
            [InlineKeyboardButton(text="‚≠ê –ü–æ —É—Ä–æ–≤–Ω—é", callback_data=f"waifu_list_sort_level_{page}")],
            [InlineKeyboardButton(text="üíé –ü–æ —Ä–µ–¥–∫–æ—Å—Ç–∏", callback_data=f"waifu_list_sort_rarity_{page}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"waifu_list_page_{page}_{sort_by}")]
        ])
        
        await callback.message.edit_text(
            "üîÄ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É:</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")


async def handle_waifu_list_sort_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –≤–∞–π—Ñ—É"""
    if callback.from_user is None:
        return
    
    # –ü–∞—Ä—Å–∏–º callback data: waifu_list_sort_{sort_by}_{page}
    parts = callback.data.split("_")
    if len(parts) >= 5:
        # sort_by —Ç–µ–ø–µ—Ä—å –±–µ–∑ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "createdat")
        # –î–ª—è callback data: waifu_list_sort_createdat_0
        # parts = ['waifu', 'list', 'sort', 'createdat', '0']
        sort_by = parts[3]  # parts[3] = 'createdat'
        page = int(parts[4])  # parts[4] = '0' -> 0
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º sort_by –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if sort_by == "createdat":
            sort_by = "created_at"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ª–∏ –º—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—É –∂–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        # –ï—Å–ª–∏ –¥–∞, —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        await show_waifu_list_page(callback, page=page, sort_by=sort_by)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")


async def handle_event_waifu_select_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–π—Ñ—É –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Å–æ–±—ã—Ç–∏–∏"""
    if callback.from_user is None:
        return
    
    # –ü–∞—Ä—Å–∏–º callback data: event_waifu_select_{waifu_id}_{event_type}
    parts = callback.data.split("_")
    if len(parts) >= 5:
        waifu_id = parts[3]
        event_type = parts[4]
        
        tg_user_id = callback.from_user.id
        session = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = session.execute(select(User).where(User.tg_id == tg_user_id))
            user = result.scalar_one_or_none()

            if user is None:
                await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–π—Ñ—É
            waifu_result = session.execute(
                select(Waifu).where(Waifu.id == waifu_id, Waifu.owner_id == user.id)
            )
            waifu = waifu_result.scalar_one_or_none()

            if not waifu:
                await callback.answer("–í–∞–π—Ñ—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è
            can_participate, reason = can_participate_in_event({
                "dynamic": waifu.dynamic,
                "profession": waifu.profession
            }, event_type)
            
            if not can_participate:
                await callback.answer(f"–ù–µ–ª—å–∑—è —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å: {reason}")
                return

            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            score, event_name = calculate_event_score({
                "stats": waifu.stats,
                "profession": waifu.profession,
                "dynamic": waifu.dynamic
            }, event_type)
            
            rewards = get_event_rewards(score, event_type)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–π—Ñ—É
            waifu.xp += rewards["xp"]
            waifu.dynamic["energy"] = max(0, waifu.dynamic["energy"] - 20)
            waifu.dynamic["mood"] = min(100, waifu.dynamic["mood"] + 5)
            waifu.dynamic["loyalty"] = min(100, waifu.dynamic["loyalty"] + 2)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.coins += rewards["coins"]
            
            session.commit()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_text = format_event_result({
                "name": waifu.name,
                "stats": waifu.stats,
                "dynamic": waifu.dynamic
            }, event_type, score, rewards)

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–æ–±—ã—Ç–∏—è–º", callback_data="waifu_events")]
            ])

            await callback.message.edit_text(result_text, reply_markup=keyboard, parse_mode="HTML")
            await callback.answer()

        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
        finally:
            session.close()
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")




async def handle_waifu_details_menu_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–π—Ñ—É"""
    if callback.from_user is None:
        return
    
    # –ü–∞—Ä—Å–∏–º callback data: waifu_details_menu_{page}_{sort_by}
    parts = callback.data.split("_")
    if len(parts) >= 5:
        page = int(parts[3])  # parts[3] = page
        # sort_by –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "created_at")
        sort_by = "_".join(parts[4:]) if len(parts) > 4 else "created_at"
        
        tg_user_id = callback.from_user.id
        session = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = session.execute(select(User).where(User.tg_id == tg_user_id))
            user = result.scalar_one_or_none()

            if user is None:
                await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤–∞–π—Ñ—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            order_clause = {
                "created_at": Waifu.created_at.desc(),
                "name": Waifu.name.asc(),
                "level": Waifu.level.desc(),
                "rarity": Waifu.rarity.desc()
            }.get(sort_by, Waifu.created_at.desc())

            waifus_result = session.execute(
                select(Waifu).where(Waifu.owner_id == user.id).order_by(order_clause)
            )
            waifus = waifus_result.scalars().all()

            if not waifus:
                await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –≤–∞–π—Ñ—É!")
                return

            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            WAIFUS_PER_PAGE = 5
            start_idx = page * WAIFUS_PER_PAGE
            end_idx = start_idx + WAIFUS_PER_PAGE
            current_waifus = waifus[start_idx:end_idx]

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–π—Ñ—É –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            keyboard_buttons = []
            for waifu in current_waifus:
                power = calculate_waifu_power({
                    "stats": waifu.stats,
                    "dynamic": waifu.dynamic,
                    "level": waifu.level
                })
                rarity_icon = get_rarity_color(waifu.rarity)
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"üñºÔ∏è {waifu.name} - –£—Ä.{waifu.level} {rarity_icon} üí™{power}",
                        web_app=WebAppInfo(url=f"https://waifu-bot-webapp.onrender.com/waifu-card/{waifu.id}?waifu_id={waifu.id}")
                    )
                ])
            
            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            nav_buttons = []
            if page > 0:
                nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"waifu_details_menu_{page-1}_{sort_by}"))
            if end_idx < len(waifus):
                nav_buttons.append(InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"waifu_details_menu_{page+1}_{sort_by}"))
            
            if nav_buttons:
                keyboard_buttons.append(nav_buttons)
            
            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"waifu_list_page_{page}_{sort_by}")])

            text = (
                f"‚ÑπÔ∏è <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
                f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{(len(waifus) + WAIFUS_PER_PAGE - 1) // WAIFUS_PER_PAGE}\n"
                f"üîÄ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {get_sort_display_name(sort_by)}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–π—Ñ—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ WebApp:"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            await callback.answer()

        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
        finally:
            session.close()
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
