from aiogram import Router
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from sqlalchemy import select, func
from datetime import datetime, timedelta

from bot.db import SessionLocal
from bot.models import User, Waifu, Transaction
from bot.services.waifu_generator import generate_waifu, format_waifu_card, calculate_waifu_power, get_rarity_color
from bot.services.event_system import (
    calculate_event_score, get_event_rewards, get_random_event, 
    get_event_description, format_event_result, get_available_events,
    can_participate_in_event
)
from bot.data_tables import EVENTS

router = Router()


def get_sort_display_name(sort_by: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
    sort_names = {
        "power": "–ü–æ —Å–∏–ª–µ",
        "name": "–ü–æ –∏–º–µ–Ω–∏", 
        "level": "–ü–æ —É—Ä–æ–≤–Ω—é",
        "rarity": "–ü–æ —Ä–µ–¥–∫–æ—Å—Ç–∏",
        "created_at": "–ü–æ –¥–∞—Ç–µ"
    }
    return sort_names.get(sort_by, "–ü–æ –¥–∞—Ç–µ")


@router.callback_query()
async def handle_menu_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
    if callback.data == "profile":
        await handle_profile_callback(callback)
    elif callback.data == "daily":
        await handle_daily_callback(callback)
    elif callback.data == "waifu_menu":
        await handle_waifu_menu_callback(callback)
    elif callback.data == "waifu_pull":
        await handle_waifu_pull_callback(callback)
    elif callback.data == "waifu_list":
        await handle_waifu_list_callback(callback)
    elif callback.data == "waifu_events":
        await handle_waifu_events_callback(callback)
    elif callback.data == "random_event":
        await handle_random_event_callback(callback)
    elif callback.data.startswith("event_accept_"):
        await handle_event_accept_callback(callback)
    elif callback.data == "event_decline":
        await handle_event_decline_callback(callback)
    elif callback.data == "event_cannot_participate":
        await callback.answer("‚õî –≠—Ç–∞ –≤–∞–π—Ñ—É –Ω–µ –º–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–æ–±—ã—Ç–∏–∏!")
    elif callback.data == "back_to_waifu_menu":
        await handle_waifu_menu_callback(callback)
    elif callback.data.startswith("waifu_list_page_"):
        await handle_waifu_list_page_callback(callback)
    elif callback.data.startswith("waifu_list_sort_"):
        await handle_waifu_list_sort_callback(callback)
    elif callback.data.startswith("waifu_list_sort_menu_"):
        await handle_waifu_list_sort_menu_callback(callback)
    elif callback.data.startswith("event_waifu_select_"):
        await handle_event_waifu_select_callback(callback)
    elif callback.data.startswith("waifu_details_menu_"):
        await handle_waifu_details_menu_callback(callback)
    elif callback.data == "admin_test_pull":
        await handle_admin_test_pull_callback(callback)
    elif callback.data == "admin_list_waifu":
        await handle_admin_list_waifu_callback(callback)
    elif callback.data == "admin_clear_waifu":
        await handle_admin_clear_waifu_callback(callback)
    elif callback.data == "admin_add_coins":
        await handle_admin_add_coins_callback(callback)
    elif callback.data == "debug_back":
        await handle_debug_back_callback(callback)
    elif callback.data == "stats":
        await handle_stats_callback(callback)
    elif callback.data == "back_to_menu":
        await handle_back_to_menu(callback)
    elif callback.data == "events_menu":
        await handle_waifu_events_callback(callback)
    elif callback.data == "debug_menu":
        from bot.handlers.debug import handle_debug_menu_callback
        await handle_debug_menu_callback(callback)
    elif callback.data.startswith("debug_"):
        from bot.handlers.debug import handle_debug_action_callback
        await handle_debug_action_callback(callback)
    elif callback.data == "teaching_menu":
        await handle_teaching_menu_callback(callback)
    elif callback.data.startswith("teaching_select_student_"):
        await handle_teaching_select_student_callback(callback)
    elif callback.data.startswith("teaching_select_teacher_"):
        await handle_teaching_select_teacher_callback(callback)
    elif callback.data.startswith("teaching_toggle_teacher_"):
        await handle_teaching_toggle_teacher_callback(callback)
    elif callback.data == "teaching_confirm":
        await handle_teaching_confirm_callback(callback)


async def handle_profile_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ—Ñ–∏–ª—å"""
    if callback.from_user is None:
        return

    tg_user_id = callback.from_user.id
    session = SessionLocal()
    try:
        result = session.execute(select(User).where(User.tg_id == tg_user_id))
        user = result.scalar_one_or_none()

        if user is None:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return

        text = (
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üí∞ –ú–æ–Ω–µ—Ç—ã: {user.coins}\n"
            f"üíé –ì–µ–º—ã: {user.gems}\n"
            f"üë§ –ù–∏–∫: @{user.username if user.username else '‚Äî'}\n"
            f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y')}\n"
            f"üî• –°–µ—Ä–∏—è –¥–Ω–µ–π: {user.daily_streak}"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
    finally:
        session.close()


async def handle_daily_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å"""
    if callback.from_user is None:
        return

    tg_user_id = callback.from_user.id
    session = SessionLocal()
    try:
        result = session.execute(select(User).where(User.tg_id == tg_user_id))
        user = result.scalar_one_or_none()

        if user is None:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return

        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
        from datetime import datetime, timedelta
        now = datetime.utcnow()
        last_daily = user.last_daily.replace(tzinfo=None) if user.last_daily else datetime(1970, 1, 1)
        
        if now - last_daily < timedelta(hours=24):
            time_left = timedelta(hours=24) - (now - last_daily)
            hours = int(time_left.total_seconds() // 3600)
            minutes = int((time_left.total_seconds() % 3600) // 60)
            
            text = (
                f"üéÅ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å</b>\n\n"
                f"‚è∞ –ë–æ–Ω—É—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
                f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {hours}—á {minutes}–º\n\n"
                f"üí° –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –±–æ–Ω—É—Å–æ–º!"
            )
        else:
            # –í—ã–¥–∞–µ–º –±–æ–Ω—É—Å
            user.coins += 50
            user.daily_streak += 1
            user.last_daily = now
            session.commit()

            text = (
                f"üéÅ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω!</b>\n\n"
                f"üí∞ +50 –º–æ–Ω–µ—Ç\n"
                f"üî• –°–µ—Ä–∏—è –¥–Ω–µ–π: {user.daily_streak}\n"
                f"üíµ –ë–∞–ª–∞–Ω—Å: {user.coins} –º–æ–Ω–µ—Ç"
            )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
    finally:
        session.close()


async def handle_gacha_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ì–∞—á–∞"""
    text = (
        "üé∞ <b>–ì–∞—á–∞ —Å–∏—Å—Ç–µ–º–∞</b>\n\n"
        "üí∞ <b>–û–±—ã—á–Ω—ã–π –ø—Ä–∏–∑—ã–≤:</b> 100 –º–æ–Ω–µ—Ç\n"
        "üíé <b>–ü—Ä–µ–º–∏—É–º –ø—Ä–∏–∑—ã–≤:</b> 10 –≥–µ–º–æ–≤\n"
        "üéÅ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–∏–∑—ã–≤:</b> –ë–µ—Å–ø–ª–∞—Ç–Ω–æ\n\n"
        "üìä <b>–®–∞–Ω—Å—ã:</b>\n"
        "‚Ä¢ –û–±—ã—á–Ω—ã–π: 60%\n"
        "‚Ä¢ –†–µ–¥–∫–∏–π: 25%\n"
        "‚Ä¢ –≠–ø–∏—á–µ—Å–∫–∏–π: 12%\n"
        "‚Ä¢ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π: 3%"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –û–±—ã—á–Ω—ã–π –ø—Ä–∏–∑—ã–≤ (100 –º–æ–Ω–µ—Ç)", callback_data="gacha_normal")],
        [InlineKeyboardButton(text="üíé –ü—Ä–µ–º–∏—É–º –ø—Ä–∏–∑—ã–≤ (10 –≥–µ–º–æ–≤)", callback_data="gacha_premium")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


async def handle_stats_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    if callback.from_user is None:
        return
    
    session = SessionLocal()
    try:
        # Get current user
        tg_user_id = callback.from_user.id
        result = session.execute(select(User).where(User.tg_id == tg_user_id))
        current_user = result.scalar_one_or_none()
        
        # Get total users count
        total_users = session.execute(select(func.count(User.id))).scalar() or 0
        
        # Get total coins in system
        total_coins = session.execute(select(func.sum(User.coins))).scalar() or 0
        
        # Get top users by coins
        top_users = session.execute(
            select(User).order_by(User.coins.desc()).limit(5)
        ).scalars().all()
        
        # Build top players text
        top_players = ""
        for i, user in enumerate(top_users, 1):
            username = f"@{user.username}" if user.username else user.display_name or "Anonymous"
            coins = user.coins
            if user.id == current_user.id if current_user else False:
                top_players += f"<b>{i}. {username} - {coins} –º–æ–Ω–µ—Ç ‚≠ê (–í—ã)</b>\n"
            else:
                top_players += f"{i}. {username} - {coins} –º–æ–Ω–µ—Ç\n"
        
        # Get user stats
        user_waifus = session.execute(
            select(func.count(Waifu.id)).where(Waifu.owner_id == current_user.id if current_user else 0)
        ).scalar() or 0
        
        text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üéØ <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ: {total_coins}\n\n"
            f"üë§ <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –ú–æ–Ω–µ—Ç—ã: {current_user.coins if current_user else 0}\n"
            f"‚Ä¢ –ì–µ–º—ã: {current_user.gems if current_user else 0}\n"
            f"‚Ä¢ –í–∞–π—Ñ—É: {user_waifus}\n\n"
            f"üèÜ <b>–¢–æ–ø –∏–≥—Ä–æ–∫–∏:</b>\n{top_players}"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
    finally:
        session.close()


async def handle_waifu_menu_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –í–∞–π—Ñ—É"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé∞ –ü—Ä–∏–∑–≤–∞—Ç—å –≤–∞–π—Ñ—É", callback_data="waifu_pull")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –≤–∞–π—Ñ—É", callback_data="waifu_list")],
        [InlineKeyboardButton(text="üìö –û–±—É—á–µ–Ω–∏–µ", callback_data="teaching_menu")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

    await callback.message.edit_text(
        "üé≠ <b>–í–∞–π—Ñ—É —Å–∏—Å—Ç–µ–º–∞</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –≤–∞–π—Ñ—É! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ü—Ä–∏–∑—ã–≤–∞—Ç—å –Ω–æ–≤—ã—Ö –≤–∞–π—Ñ—É\n"
        "‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–æ–±—ã—Ç–∏—è—Ö\n"
        "‚Ä¢ –°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö\n"
        "‚Ä¢ –†–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–∏—Ö –≤–∞–π—Ñ—É\n"
        "‚Ä¢ –û–±—É—á–∞—Ç—å –≤–∞–π—Ñ—É (–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –¥–ª—è XP)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


async def handle_back_to_menu(callback: CallbackQuery) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    from aiogram.types import WebAppInfo
    import os
    
    webapp_url = os.getenv("WEBAPP_URL", "https://waifu-bot-webapp.onrender.com")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", web_app=WebAppInfo(url=f"{webapp_url}/webapp/profile.html"))],
        [InlineKeyboardButton(text="üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", callback_data="daily")],
        [InlineKeyboardButton(text="üé≠ –í–∞–π—Ñ—É", callback_data="waifu_menu")],
        [InlineKeyboardButton(text="üéØ –°–æ–±—ã—Ç–∏—è", callback_data="events_menu")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton(text="üîß Debug", callback_data="debug_menu")]
    ])

    await callback.message.edit_text(
        "ü§ñ <b>Waifu Bot</b>\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


async def handle_waifu_pull_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∑—ã–≤–∞ –≤–∞–π—Ñ—É"""
    if callback.from_user is None:
        return

    tg_user_id = callback.from_user.id
    session = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = session.execute(select(User).where(User.tg_id == tg_user_id))
        user = result.scalar_one_or_none()

        if user is None:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if user.coins < 100:
            await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ 100 –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–∏–∑—ã–≤–∞.")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –≤–∞–π—Ñ—É
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
        max_card = session.execute(select(func.max(Waifu.card_number))).scalar() or 0
        new_waifu_data = generate_waifu(max_card + 1, user.id)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∞–π—Ñ—É –≤ –±–∞–∑–µ
        waifu = Waifu(**new_waifu_data)
        session.add(waifu)
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã
        user.coins -= 100
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = Transaction(
            user_id=user.id,
            kind="spend",
            amount=100,
            currency="coins",
            reason="waifu_pull",
            meta={"waifu_id": waifu.id}
        )
        session.add(transaction)
        
        session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        card_text = format_waifu_card(new_waifu_data)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤–∞–π—Ñ—É", callback_data="back_to_waifu_menu")]
        ])
        
        await callback.message.edit_text(
            f"üé∞ <b>–ü—Ä–∏–∑—ã–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n{card_text}\n\n"
            f"üí∞ –û—Å—Ç–∞–ª–æ—Å—å –º–æ–Ω–µ—Ç: {user.coins}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer("–í–∞–π—Ñ—É —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∑–≤–∞–Ω–∞!")

    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∑—ã–≤–µ: {str(e)}")
    finally:
        session.close()


async def handle_waifu_list_callback(callback: CallbackQuery) -> None:
    """–°–ø–∏—Å–æ–∫ –≤–∞–π—Ñ—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if callback.from_user is None:
        return

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
    await show_waifu_list_page(callback, page=0, sort_by="created_at")


async def show_waifu_list_page(callback: CallbackQuery, page: int = 0, sort_by: str = "created_at") -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –≤–∞–π—Ñ—É"""
    if callback.from_user is None:
        return

    tg_user_id = callback.from_user.id
    session = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = session.execute(select(User).where(User.tg_id == tg_user_id))
        user = result.scalar_one_or_none()

        if user is None:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∞–π—Ñ—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        waifus_result = session.execute(
            select(Waifu).where(Waifu.owner_id == user.id)
        )
        waifus = waifus_result.scalars().all()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        if sort_by == "power":
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–∏–ª–µ (—Å—É–º–º–∞ –≤—Å–µ—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫)
            waifus = sorted(waifus, key=lambda w: sum(w.stats.values()) if w.stats else 0, reverse=True)
        elif sort_by == "name":
            waifus = sorted(waifus, key=lambda w: w.name.lower())
        elif sort_by == "level":
            waifus = sorted(waifus, key=lambda w: w.level, reverse=True)
        elif sort_by == "rarity":
            rarity_order = {"Legendary": 5, "Epic": 4, "Rare": 3, "Uncommon": 2, "Common": 1}
            waifus = sorted(waifus, key=lambda w: rarity_order.get(w.rarity, 0), reverse=True)
        else:  # created_at or default
            waifus = sorted(waifus, key=lambda w: w.created_at, reverse=True)

        if not waifus:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤–∞–π—Ñ—É", callback_data="back_to_waifu_menu")]
            ])
            await callback.message.edit_text(
                "üìã <b>–ú–æ–∏ –≤–∞–π—Ñ—É</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–∞–π—Ñ—É.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–∑—ã–≤, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é –ø–µ—Ä–≤—É—é –≤–∞–π—Ñ—É!",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await callback.answer()
            return

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        WAIFUS_PER_PAGE = 5
        start_idx = page * WAIFUS_PER_PAGE
        end_idx = start_idx + WAIFUS_PER_PAGE
        current_waifus = waifus[start_idx:end_idx]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
        text = f"üìã <b>–ú–æ–∏ –≤–∞–π—Ñ—É ({len(waifus)})</b>\n"
        text += f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{(len(waifus) + WAIFUS_PER_PAGE - 1) // WAIFUS_PER_PAGE}\n"
        text += f"üîÄ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {get_sort_display_name(sort_by)}\n\n"
        
        for i, waifu in enumerate(current_waifus, start_idx + 1):
            power = calculate_waifu_power({
                "stats": waifu.stats,
                "dynamic": waifu.dynamic,
                "level": waifu.level
            })
            
            rarity_icon = get_rarity_color(waifu.rarity)
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–π—Ñ—É –±–µ–∑ —Å—Å—ã–ª–∫–∏
            text += f"{i}. {waifu.name} - –£—Ä.{waifu.level} {rarity_icon} üí™{power}\n"

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard_buttons = []
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"waifu_list_page_{page-1}_{sort_by}"))
        if end_idx < len(waifus):
            nav_buttons.append(InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"waifu_list_page_{page+1}_{sort_by}"))
        
        if nav_buttons:
            keyboard_buttons.append(nav_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        keyboard_buttons.append([InlineKeyboardButton(text="‚ÑπÔ∏è –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data=f"waifu_details_menu_{page}_{sort_by}")])
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        keyboard_buttons.append([InlineKeyboardButton(text="üîÄ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", callback_data=f"waifu_list_sort_menu_{page}_{sort_by}")])
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤–∞–π—Ñ—É", callback_data="back_to_waifu_menu")])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        try:
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        except Exception as edit_error:
            if "message is not modified" in str(edit_error):
                # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
                await callback.answer()
                return
            else:
                raise edit_error
        await callback.answer()

    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()


async def handle_waifu_events_callback(callback: CallbackQuery) -> None:
    """–°–æ–±—ã—Ç–∏—è –≤–∞–π—Ñ—É"""
    if callback.from_user is None:
        return

    events = get_available_events()
    
    text = "üéØ <b>–°–æ–±—ã—Ç–∏—è –≤–∞–π—Ñ—É</b>\n\n"
    text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:\n\n"
    
    for event in events:
        text += f"üé™ <b>{event['name']}</b>\n"
        text += f"üìù {event['description']}\n"
        text += f"üìä –ù—É–∂–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {', '.join(event['base_stats'])}\n"
        text += f"üíº –ë–æ–Ω—É—Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: {event['profession_bonus']}\n\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ", callback_data="random_event")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤–∞–π—Ñ—É", callback_data="back_to_waifu_menu")]
    ])

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


async def handle_random_event_callback(callback: CallbackQuery) -> None:
    """–£—á–∞—Å—Ç–∏–µ –≤ —Å–ª—É—á–∞–π–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏ - –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è"""
    if callback.from_user is None:
        return

    tg_user_id = callback.from_user.id
    session = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = session.execute(select(User).where(User.tg_id == tg_user_id))
        user = result.scalar_one_or_none()

        if user is None:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∞–π—Ñ—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        waifus_result = session.execute(
            select(Waifu).where(Waifu.owner_id == user.id)
        )
        waifus = waifus_result.scalars().all()

        if not waifus:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –≤–∞–π—Ñ—É –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Å–æ–±—ã—Ç–∏—è—Ö!")
            return

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        event_type = get_random_event()
        event = EVENTS.get(event_type, {})
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—á–∞—Å—Ç–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º 60 —Å–µ–∫—É–Ω–¥
        text = (
            f"üé≤ <b>–°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ!</b>\n\n"
            f"üéØ <b>{event.get('name', '–°–æ–±—ã—Ç–∏–µ')}</b>\n"
            f"üìù {event.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n\n"
            f"‚è±Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å <b>60 —Å–µ–∫—É–Ω–¥</b> —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ!\n\n"
            f"–•–æ—Ç–∏—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å?"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!", callback_data=f"event_accept_{event_type}"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data="event_decline")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–æ–±—ã—Ç–∏—è–º", callback_data="waifu_events")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()

    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()


async def handle_event_accept_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —É—á–∞—Å—Ç–∏—è –≤ —Å–æ–±—ã—Ç–∏–∏"""
    if callback.from_user is None:
        return
    
    # –ü–∞—Ä—Å–∏–º callback data: event_accept_{event_type}
    parts = callback.data.split("_")
    if len(parts) >= 3:
        event_type = parts[2]
        
        tg_user_id = callback.from_user.id
        session = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = session.execute(select(User).where(User.tg_id == tg_user_id))
            user = result.scalar_one_or_none()

            if user is None:
                await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∞–π—Ñ—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            waifus_result = session.execute(
                select(Waifu).where(Waifu.owner_id == user.id)
            )
            waifus = waifus_result.scalars().all()

            if not waifus:
                await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –≤–∞–π—Ñ—É –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Å–æ–±—ã—Ç–∏—è—Ö!")
                return

            event = EVENTS.get(event_type, {})
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–π—Ñ—É
            keyboard_buttons = []
            for waifu in waifus:
                power = calculate_waifu_power({
                    "stats": waifu.stats,
                    "dynamic": waifu.dynamic,
                    "level": waifu.level
                })
                rarity_icon = get_rarity_color(waifu.rarity)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è
                can_participate, reason = can_participate_in_event({
                    "dynamic": waifu.dynamic,
                    "profession": waifu.profession
                }, event_type)
                
                button_text = f"{waifu.name} - –£—Ä.{waifu.level} {rarity_icon} üí™{power}"
                if not can_participate:
                    button_text += f" ‚õî ({reason})"
                
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=button_text,
                        callback_data=f"event_waifu_select_{waifu.id}_{event_type}" if can_participate else "event_cannot_participate"
                    )
                ])
            
            keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–æ–±—ã—Ç–∏—è–º", callback_data="waifu_events")])

            text = (
                f"üéØ <b>{event.get('name', '–°–æ–±—ã—Ç–∏–µ')}</b>\n\n"
                f"üìù {event.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–π—Ñ—É –¥–ª—è —É—á–∞—Å—Ç–∏—è:"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            await callback.answer()

        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
        finally:
            session.close()


async def handle_event_decline_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ —Å–æ–±—ã—Ç–∏–∏"""
    text = (
        f"‚ùå <b>–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ —Å–æ–±—ã—Ç–∏–∏</b>\n\n"
        f"–í–æ–∑–º–æ–∂–Ω–æ, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑–µ—Ç –±–æ–ª—å—à–µ!"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤ –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ", callback_data="random_event")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–æ–±—ã—Ç–∏—è–º", callback_data="waifu_events")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


# Debug –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 305174198

async def handle_admin_test_pull_callback(callback: CallbackQuery) -> None:
    """–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–∑—ã–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if callback.from_user is None or callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    session = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = session.execute(select(User).where(User.tg_id == callback.from_user.id))
        user = result.scalar_one_or_none()
        
        if user is None:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≤–∞–π—Ñ—É
        max_card = session.execute(select(func.max(Waifu.card_number))).scalar() or 0
        new_waifu_data = generate_waifu(max_card + 1, user.id)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∞–π—Ñ—É –≤ –±–∞–∑–µ
        waifu = Waifu(**new_waifu_data)
        session.add(waifu)
        session.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        card_text = format_waifu_card(new_waifu_data)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ debug", callback_data="debug_back")]
        ])
        
        await callback.message.edit_text(
            f"üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–∑—ã–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n{card_text}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer("–¢–µ—Å—Ç–æ–≤–∞—è –≤–∞–π—Ñ—É —Å–æ–∑–¥–∞–Ω–∞!")
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()


async def handle_admin_list_waifu_callback(callback: CallbackQuery) -> None:
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞–π—Ñ—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if callback.from_user is None or callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    session = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∞–π—Ñ—É
        waifus_result = session.execute(
            select(Waifu).order_by(Waifu.created_at.desc()).limit(20)
        )
        waifus = waifus_result.scalars().all()
        
        if not waifus:
            text = "üìã <b>–°–ø–∏—Å–æ–∫ –≤–∞–π—Ñ—É</b>\n\n–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–∞–π—Ñ—É."
        else:
            text = f"üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(waifus)} –≤–∞–π—Ñ—É:</b>\n\n"
            for i, waifu in enumerate(waifus, 1):
                power = calculate_waifu_power({
                    "stats": waifu.stats,
                    "dynamic": waifu.dynamic,
                    "level": waifu.level
                })
                text += f"{i}. {waifu.name} [{waifu.rarity}] - üí™{power}\n"
                text += f"   –í–ª–∞–¥–µ–ª–µ—Ü: {waifu.owner_id} | ID: {waifu.id}\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ debug", callback_data="debug_back")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()


async def handle_admin_clear_waifu_callback(callback: CallbackQuery) -> None:
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤–∞–π—Ñ—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if callback.from_user is None or callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    session = SessionLocal()
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–∞–π—Ñ—É
        deleted_count = session.execute(select(func.count(Waifu.id))).scalar()
        session.execute(select(Waifu).delete())
        session.commit()
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ debug", callback_data="debug_back")]
        ])
        
        await callback.message.edit_text(
            f"üóëÔ∏è <b>–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n–£–¥–∞–ª–µ–Ω–æ –≤–∞–π—Ñ—É: {deleted_count}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer("–í–∞–π—Ñ—É –æ—á–∏—â–µ–Ω—ã!")
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()


async def handle_admin_add_coins_callback(callback: CallbackQuery) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if callback.from_user is None or callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    session = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = session.execute(select(User).where(User.tg_id == callback.from_user.id))
        user = result.scalar_one_or_none()
        
        if user is None:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã
        user.coins += 1000
        session.commit()
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ debug", callback_data="debug_back")]
        ])
        
        await callback.message.edit_text(
            f"üí∞ <b>–ú–æ–Ω–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!</b>\n\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.coins} –º–æ–Ω–µ—Ç",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer("–ú–æ–Ω–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()


async def handle_debug_back_callback(callback: CallbackQuery) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ debug –º–µ–Ω—é"""
    if callback.from_user is None or callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ debug –∫–æ–º–∞–Ω–¥–µ
    await callback.message.edit_text("üîç <b>DEBUG MENU</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /debug –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    await callback.answer()


async def handle_waifu_list_page_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∞–π—Ñ—É"""
    if callback.from_user is None:
        return
    
    # –ü–∞—Ä—Å–∏–º callback data: waifu_list_page_{page}_{sort_by}
    parts = callback.data.split("_")
    if len(parts) >= 5:
        page = int(parts[3])
        sort_by = parts[4]
        await show_waifu_list_page(callback, page=page, sort_by=sort_by)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")


async def handle_waifu_list_sort_menu_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –≤–∞–π—Ñ—É"""
    if callback.from_user is None:
        return
    
    # –ü–∞—Ä—Å–∏–º callback data: waifu_list_sort_menu_{page}_{sort_by}
    parts = callback.data.split("_")
    if len(parts) >= 5:
        page = int(parts[4])  # parts[4] = page
        # sort_by –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "created_at")
        sort_by = "_".join(parts[5:]) if len(parts) > 5 else "created_at"
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí™ –ü–æ —Å–∏–ª–µ", callback_data=f"waifu_list_sort_power_{page}")],
            [InlineKeyboardButton(text="üìù –ü–æ –∏–º–µ–Ω–∏", callback_data=f"waifu_list_sort_name_{page}")],
            [InlineKeyboardButton(text="‚≠ê –ü–æ —É—Ä–æ–≤–Ω—é", callback_data=f"waifu_list_sort_level_{page}")],
            [InlineKeyboardButton(text="üíé –ü–æ —Ä–µ–¥–∫–æ—Å—Ç–∏", callback_data=f"waifu_list_sort_rarity_{page}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"waifu_list_page_{page}_{sort_by}")]
        ])
        
        await callback.message.edit_text(
            "üîÄ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É:</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")


async def handle_waifu_list_sort_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –≤–∞–π—Ñ—É"""
    import logging
    logger = logging.getLogger(__name__)
    
    if callback.from_user is None:
        return
    
    logger.info(f"üîÄ SORT CALLBACK: {callback.data}")
    
    # –ü–∞—Ä—Å–∏–º callback data: waifu_list_sort_{sort_by}_{page}
    parts = callback.data.split("_")
    logger.info(f"   Parts: {parts}")
    
    if len(parts) >= 5:
        # sort_by —Ç–µ–ø–µ—Ä—å –±–µ–∑ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "createdat", "power", "name")
        # –î–ª—è callback data: waifu_list_sort_power_0
        # parts = ['waifu', 'list', 'sort', 'power', '0']
        sort_by = parts[3]  # parts[3] = 'power'
        page = int(parts[4])  # parts[4] = '0' -> 0
        
        logger.info(f"   Parsed: sort_by={sort_by}, page={page}")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º sort_by –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è created_at)
        if sort_by == "createdat":
            sort_by = "created_at"
            logger.info(f"   Converted: sort_by={sort_by}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É —Å –Ω–æ–≤–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
        logger.info(f"   Calling show_waifu_list_page with sort_by={sort_by}")
        await show_waifu_list_page(callback, page=page, sort_by=sort_by)
    else:
        logger.error(f"   ERROR: Invalid parts length: {len(parts)}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")


async def handle_event_waifu_select_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–π—Ñ—É –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Å–æ–±—ã—Ç–∏–∏"""
    if callback.from_user is None:
        return
    
    # –ü–∞—Ä—Å–∏–º callback data: event_waifu_select_{waifu_id}_{event_type}
    # waifu_id –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, wf_ddd65e42)
    parts = callback.data.split("_")
    if len(parts) >= 5:
        # –°–æ–±–∏—Ä–∞–µ–º waifu_id –æ–±—Ä–∞—Ç–Ω–æ (–≤—Å–µ —á–∞—Å—Ç–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤—ã—Ö 3 –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
        # event_waifu_select_wf_ddd65e42_dance -> wf_ddd65e42
        waifu_id = "_".join(parts[3:-1])
        event_type = parts[-1]
        
        tg_user_id = callback.from_user.id
        session = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = session.execute(select(User).where(User.tg_id == tg_user_id))
            user = result.scalar_one_or_none()

            if user is None:
                await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–π—Ñ—É
            waifu_result = session.execute(
                select(Waifu).where(Waifu.id == waifu_id, Waifu.owner_id == user.id)
            )
            waifu = waifu_result.scalar_one_or_none()

            if not waifu:
                await callback.answer("–í–∞–π—Ñ—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è
            can_participate, reason = can_participate_in_event({
                "dynamic": waifu.dynamic,
                "profession": waifu.profession
            }, event_type)
            
            if not can_participate:
                await callback.answer(f"–ù–µ–ª—å–∑—è —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å: {reason}")
                return

            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            score, event_name = calculate_event_score({
                "stats": waifu.stats,
                "profession": waifu.profession,
                "dynamic": waifu.dynamic
            }, event_type)
            
            rewards = get_event_rewards(score, event_type)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–π—Ñ—É
            from datetime import datetime
            from sqlalchemy.orm.attributes import flag_modified
            import logging
            from bot.services.level_up import level_up_service
            logger = logging.getLogger(__name__)
            
            # Log BEFORE changes
            old_xp = waifu.xp
            old_level = waifu.level
            old_dynamic = dict(waifu.dynamic) if waifu.dynamic else {}
            logger.info(f"üîç EVENT PARTICIPATION - BEFORE: Waifu {waifu.id} ({waifu.name})")
            logger.info(f"   Level: {old_level}, XP: {old_xp}")
            logger.info(f"   Dynamic: {old_dynamic}")
            
            # Add XP
            waifu.xp += rewards["xp"]
            
            # Check for level up
            should_level_up, new_level = level_up_service.check_level_up(waifu.xp, waifu.level)
            level_up_info = None
            
            if should_level_up:
                logger.info(f"üéâ LEVEL UP DETECTED! {old_level} ‚Üí {new_level}")
                
                # Apply level up changes
                waifu_data = {
                    "level": waifu.level,
                    "xp": waifu.xp,
                    "stats": dict(waifu.stats)
                }
                
                level_up_info = level_up_service.apply_level_up(waifu_data, new_level)
                
                # Update waifu with new level and stats
                waifu.level = new_level
                waifu.stats = level_up_info["updated_stats"]
                flag_modified(waifu, "stats")
                
                logger.info(f"   New level: {new_level}")
                logger.info(f"   Stat increased: {level_up_info['increased_stat']} "
                           f"({level_up_info['old_stat_value']} ‚Üí {level_up_info['new_stat_value']})")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ int –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
            current_energy = int(waifu.dynamic.get("energy", 100))
            current_mood = int(waifu.dynamic.get("mood", 50))
            current_loyalty = int(waifu.dynamic.get("loyalty", 50))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º dynamic - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            waifu.dynamic = {
                **waifu.dynamic,
                "energy": max(0, current_energy - 20),
                "mood": min(100, current_mood + 5),
                "loyalty": min(100, current_loyalty + 2),
                "last_restore": datetime.now().isoformat()  # Update restoration timestamp
            }
            
            # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª–µ –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ –¥–ª—è SQLAlchemy
            flag_modified(waifu, "dynamic")
            
            # Log AFTER changes (before commit)
            logger.info(f"üîÑ EVENT PARTICIPATION - AFTER CHANGES: Waifu {waifu.id}")
            logger.info(f"   Level: {old_level} ‚Üí {waifu.level}")
            logger.info(f"   XP: {old_xp} ‚Üí {waifu.xp}")
            logger.info(f"   Dynamic: {waifu.dynamic}")
            logger.info(f"   flag_modified: dynamic and stats fields marked as modified")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.coins += rewards["coins"]
            
            # Commit and explicitly flush to database
            logger.info(f"üíæ Committing to database...")
            session.commit()
            session.flush()
            session.refresh(waifu)  # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            
            # Log AFTER commit
            logger.info(f"‚úÖ COMMITTED TO DB: Waifu {waifu.id}")
            logger.info(f"   Level after refresh: {waifu.level}")
            logger.info(f"   XP after refresh: {waifu.xp}")
            logger.info(f"   Dynamic after refresh: {waifu.dynamic}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_text = format_event_result({
                "name": waifu.name,
                "stats": waifu.stats,
                "dynamic": waifu.dynamic
            }, event_type, score, rewards)
            
            # Add level-up message if leveled up
            if level_up_info:
                level_up_message = level_up_service.format_level_up_message(
                    waifu.name,
                    level_up_info
                )
                result_text = f"{result_text}\n\n{level_up_message}"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–æ–±—ã—Ç–∏—è–º", callback_data="waifu_events")]
            ])

            await callback.message.edit_text(result_text, reply_markup=keyboard, parse_mode="HTML")
            await callback.answer()

        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
        finally:
            session.close()
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")


# ========== TEACHING SYSTEM HANDLERS ==========

async def handle_teaching_menu_callback(callback: CallbackQuery) -> None:
    """Show teaching menu where player selects which waifu will receive XP"""
    if callback.from_user is None:
        return
    
    tg_user_id = callback.from_user.id
    session = SessionLocal()
    try:
        result = session.execute(select(User).where(User.tg_id == tg_user_id))
        user = result.scalar_one_or_none()
        
        if user is None:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        # Get all waifus
        waifus = session.execute(
            select(Waifu).where(Waifu.owner_id == user.id).order_by(Waifu.created_at.desc())
        ).scalars().all()
        
        if not waifus:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –≤–∞–π—Ñ—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è!")
            return
        
        keyboard_buttons = []
        for waifu in waifus:
            rarity_icon = get_rarity_color(waifu.rarity)
            power = calculate_waifu_power({
                "stats": waifu.stats,
                "dynamic": waifu.dynamic,
                "level": waifu.level
            })
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"{waifu.name} - –£—Ä.{waifu.level} {rarity_icon} üí™{power}",
                    callback_data=f"teaching_select_student_{waifu.id}"
                )
            ])
        
        keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_waifu_menu")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(
            "üìö <b>–û–±—É—á–µ–Ω–∏–µ</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–π—Ñ—É, –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –¥–∞—Ç—å –æ–ø—ã—Ç (—É—á–µ–Ω–∏–∫):\n\n"
            "üí° –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏—Ö –≤–∞–π—Ñ—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –∏–º –æ–ø—ã—Ç.\n"
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–Ω–æ–π –≤–∞–π—Ñ—É.",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
    finally:
        session.close()


async def handle_teaching_select_student_callback(callback: CallbackQuery) -> None:
    """Player selected the student waifu, now show list of teachers to select"""
    if callback.from_user is None:
        return
    
    # Extract student waifu ID
    # Format: teaching_select_student_{waifu_id}
    # waifu_id can contain underscores (e.g., wf_5ddf4f29)
    import logging
    logger = logging.getLogger(__name__)
    
    parts = callback.data.split("_", 3)  # Split into max 4 parts
    logger.info(f"üìö Teaching select student callback data: {callback.data}")
    logger.info(f"   Parts: {parts}")
    
    if len(parts) < 4:
        logger.error(f"   ERROR: Invalid callback data format")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    student_id = parts[3]  # Everything after "teaching_select_student_"
    logger.info(f"   Student ID: {student_id}")
    
    tg_user_id = callback.from_user.id
    session = SessionLocal()
    try:
        result = session.execute(select(User).where(User.tg_id == tg_user_id))
        user = result.scalar_one_or_none()
        
        if user is None:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # Get student waifu
        student = session.execute(select(Waifu).where(
            Waifu.id == student_id,
            Waifu.owner_id == user.id
        )).scalar_one_or_none()
        
        if not student:
            await callback.answer("–í–∞–π—Ñ—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        # Get all other waifus (teachers can't be the student)
        waifus = session.execute(
            select(Waifu).where(
                Waifu.owner_id == user.id,
                Waifu.id != student_id
            ).order_by(Waifu.created_at.desc())
        ).scalars().all()
        
        if not waifus:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –≤–∞–π—Ñ—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è!")
            return
        
        keyboard_buttons = []
        from bot.services.waifu_upgrade import calculate_teaching_xp, get_max_level
        
        for waifu in waifus:
            rarity_icon = get_rarity_color(waifu.rarity)
            xp_given = calculate_teaching_xp(student.level, waifu.rarity, waifu.level, waifu.xp)
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"{waifu.name} - –£—Ä.{waifu.level} {rarity_icon} ‚Üí +{xp_given} XP",
                    callback_data=f"teaching_toggle_teacher_{waifu.id}"
                )
            ])
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data=f"teaching_confirm_{student_id}")
        ])
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="teaching_menu")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        max_level = get_max_level(student.rarity)
        await callback.message.edit_text(
            f"üìö <b>–û–±—É—á–µ–Ω–∏–µ: {student.name}</b>\n\n"
            f"üë§ –£—á–µ–Ω–∏–∫: {student.name} (–£—Ä.{student.level}/{max_level})\n"
            f"üìä –¢–µ–∫—É—â–∏–π XP: {student.xp}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–π—Ñ—É –¥–ª—è –∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è (–Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å):",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
    finally:
        session.close()


async def handle_teaching_toggle_teacher_callback(callback: CallbackQuery) -> None:
    """Toggle teacher selection state"""
    # For now, just show that it's selected
    # In a full implementation, we'd store selected teachers in state
    await callback.answer("‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")


async def handle_teaching_confirm_callback(callback: CallbackQuery) -> None:
    """Process the teaching - apply XP and remove teachers"""
    if callback.from_user is None:
        return
    
    # Extract student ID from callback_data
    # Format: teaching_confirm_{waifu_id}
    # waifu_id can contain underscores (e.g., wf_5ddf4f29)
    parts = callback.data.split("_", 2)  # Split into max 3 parts
    if len(parts) < 3:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    student_id = parts[2]  # Everything after "teaching_confirm_"
    
    tg_user_id = callback.from_user.id
    session = SessionLocal()
    try:
        result = session.execute(select(User).where(User.tg_id == tg_user_id))
        user = result.scalar_one_or_none()
        
        if user is None:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # Get student waifu
        student = session.execute(select(Waifu).where(
            Waifu.id == student_id,
            Waifu.owner_id == user.id
        )).scalar_one_or_none()
        
        if not student:
            await callback.answer("–í–∞–π—Ñ—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        # For now, use simple logic: get all waifus except student
        # In full implementation, we'd check which were selected
        other_waifus = session.execute(
            select(Waifu).where(
                Waifu.owner_id == user.id,
                Waifu.id != student_id
            )
        ).scalars().all()
        
        if not other_waifus:
            await callback.answer("–ù–µ—Ç –≤–∞–π—Ñ—É –¥–ª—è –∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è!")
            return
        
        # Calculate total XP from all teachers
        from bot.services.waifu_upgrade import calculate_teaching_xp
        total_xp = 0
        teacher_names = []
        
        for teacher in other_waifus:
            xp = calculate_teaching_xp(student.level, teacher.rarity, teacher.level, teacher.xp)
            total_xp += xp
            teacher_names.append(f"{teacher.name} (+{xp} XP)")
        
        # Apply XP to student
        new_xp = student.xp + total_xp
        student.xp = new_xp
        
        # Check for level up
        from bot.services.level_up import LevelUpService
        new_level = LevelUpService.calculate_level_from_xp(new_xp)
        
        # Apply level up if needed
        level_up_result = {'leveled_up': False, 'message': ''}
        if new_level > student.level:
            # Prepare waifu data
            waifu_data = {
                "level": student.level,
                "xp": new_xp,
                "stats": dict(student.stats)
            }
            
            # Apply level up
            level_up_info = LevelUpService.apply_level_up(waifu_data, new_level)
            
            # Update student waifu
            student.level = new_level
            student.stats = level_up_info["updated_stats"]
            from sqlalchemy.orm.attributes import flag_modified
            flag_modified(student, "stats")
            
            # Format level up message
            from bot.services.level_up import LevelUpService
            level_up_result = {
                'leveled_up': True,
                'message': LevelUpService.format_level_up_message(student.name, level_up_info)
            }
        
        # Delete all teacher waifus
        for teacher in other_waifus:
            session.delete(teacher)
        
        session.commit()
        
        # Show result
        result_text = (
            f"üìö <b>–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
            f"üë§ –£—á–µ–Ω–∏–∫: {student.name}\n"
            f"üìä –ü–æ–ª—É—á–µ–Ω–æ XP: +{total_xp}\n"
            f"üìà –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {student.level}\n"
            f"‚≠ê –¢–µ–∫—É—â–∏–π XP: {student.xp}\n"
        )
        
        if level_up_result.get('leveled_up'):
            result_text += f"\n{level_up_result['message']}\n"
        
        result_text += "\nüíî –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–Ω—ã–µ –≤–∞–π—Ñ—É:\n"
        for name in teacher_names:
            result_text += f"‚Ä¢ {name}\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤–∞–π—Ñ—É", callback_data="back_to_waifu_menu")]
        ])
        
        await callback.message.edit_text(result_text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()




async def handle_waifu_details_menu_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–π—Ñ—É"""
    if callback.from_user is None:
        return
    
    # –ü–∞—Ä—Å–∏–º callback data: waifu_details_menu_{page}_{sort_by}
    parts = callback.data.split("_")
    if len(parts) >= 5:
        page = int(parts[3])  # parts[3] = page
        # sort_by –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "created_at")
        sort_by = "_".join(parts[4:]) if len(parts) > 4 else "created_at"
        
        tg_user_id = callback.from_user.id
        session = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = session.execute(select(User).where(User.tg_id == tg_user_id))
            user = result.scalar_one_or_none()

            if user is None:
                await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤–∞–π—Ñ—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            order_clause = {
                "created_at": Waifu.created_at.desc(),
                "name": Waifu.name.asc(),
                "level": Waifu.level.desc(),
                "rarity": Waifu.rarity.desc()
            }.get(sort_by, Waifu.created_at.desc())

            waifus_result = session.execute(
                select(Waifu).where(Waifu.owner_id == user.id).order_by(order_clause)
            )
            waifus = waifus_result.scalars().all()

            if not waifus:
                await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –≤–∞–π—Ñ—É!")
                return

            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            WAIFUS_PER_PAGE = 5
            start_idx = page * WAIFUS_PER_PAGE
            end_idx = start_idx + WAIFUS_PER_PAGE
            current_waifus = waifus[start_idx:end_idx]

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–π—Ñ—É –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            import logging
            logger = logging.getLogger(__name__)
            
            keyboard_buttons = []
            for waifu in current_waifus:
                logger.info(f"üìã DISPLAYING WAIFU IN LIST: {waifu.id} ({waifu.name})")
                logger.info(f"   XP: {waifu.xp}")
                logger.info(f"   Dynamic: {waifu.dynamic}")
                
                power = calculate_waifu_power({
                    "stats": waifu.stats,
                    "dynamic": waifu.dynamic,
                    "level": waifu.level
                })
                rarity_icon = get_rarity_color(waifu.rarity)
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"üñºÔ∏è {waifu.name} - –£—Ä.{waifu.level} {rarity_icon} üí™{power}",
                        web_app=WebAppInfo(url=f"https://waifu-bot-webapp.onrender.com/waifu-card/{waifu.id}?waifu_id={waifu.id}")
                    )
                ])
            
            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            nav_buttons = []
            if page > 0:
                nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"waifu_details_menu_{page-1}_{sort_by}"))
            if end_idx < len(waifus):
                nav_buttons.append(InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"waifu_details_menu_{page+1}_{sort_by}"))
            
            if nav_buttons:
                keyboard_buttons.append(nav_buttons)
            
            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"waifu_list_page_{page}_{sort_by}")])

            text = (
                f"‚ÑπÔ∏è <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
                f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{(len(waifus) + WAIFUS_PER_PAGE - 1) // WAIFUS_PER_PAGE}\n"
                f"üîÄ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {get_sort_display_name(sort_by)}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–π—Ñ—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ WebApp:"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            await callback.answer()

        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
        finally:
            session.close()
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
